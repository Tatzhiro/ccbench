<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::__normal_iterator (4 samples, 0.03%)</title><rect x="708.1" y="245" width="0.3" height="15.0" fill="rgb(231,84,36)" rx="2" ry="2" />
<text  x="711.09" y="255.5" ></text>
</g>
<g >
<title>tick_sched_handle (4 samples, 0.03%)</title><rect x="1179.1" y="341" width="0.3" height="15.0" fill="rgb(213,114,18)" rx="2" ry="2" />
<text  x="1182.09" y="351.5" ></text>
</g>
<g >
<title>myBinaryInsert (2 samples, 0.01%)</title><rect x="721.7" y="245" width="0.2" height="15.0" fill="rgb(252,5,19)" rx="2" ry="2" />
<text  x="724.73" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.02%)</title><rect x="668.2" y="197" width="0.3" height="15.0" fill="rgb(244,174,7)" rx="2" ry="2" />
<text  x="671.22" y="207.5" ></text>
</g>
<g >
<title>call_function_single_interrupt (16 samples, 0.12%)</title><rect x="1175.8" y="421" width="1.4" height="15.0" fill="rgb(208,63,33)" rx="2" ry="2" />
<text  x="1178.83" y="431.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (990 samples, 7.38%)</title><rect x="1088.7" y="277" width="87.1" height="15.0" fill="rgb(235,146,50)" rx="2" ry="2" />
<text  x="1091.69" y="287.5" >tlb_flush_..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (7 samples, 0.05%)</title><rect x="1177.7" y="405" width="0.6" height="15.0" fill="rgb(253,113,19)" rx="2" ry="2" />
<text  x="1180.68" y="415.5" ></text>
</g>
<g >
<title>__dec_node_page_state (2 samples, 0.01%)</title><rect x="1084.6" y="277" width="0.1" height="15.0" fill="rgb(214,60,25)" rx="2" ry="2" />
<text  x="1087.55" y="287.5" ></text>
</g>
<g >
<title>free_unref_page_list (235 samples, 1.75%)</title><rect x="1152.9" y="229" width="20.6" height="15.0" fill="rgb(222,150,17)" rx="2" ry="2" />
<text  x="1155.86" y="239.5" ></text>
</g>
<g >
<title>x86_pmu_enable (16 samples, 0.12%)</title><rect x="739.2" y="85" width="1.4" height="15.0" fill="rgb(237,11,45)" rx="2" ry="2" />
<text  x="742.16" y="95.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (7 samples, 0.05%)</title><rect x="660.5" y="229" width="0.6" height="15.0" fill="rgb(242,106,13)" rx="2" ry="2" />
<text  x="663.47" y="239.5" ></text>
</g>
<g >
<title>usleep (30 samples, 0.22%)</title><rect x="712.2" y="261" width="2.7" height="15.0" fill="rgb(238,222,20)" rx="2" ry="2" />
<text  x="715.23" y="271.5" ></text>
</g>
<g >
<title>_raw_spin_lock (2 samples, 0.01%)</title><rect x="1178.1" y="341" width="0.2" height="15.0" fill="rgb(242,132,54)" rx="2" ry="2" />
<text  x="1181.12" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;Procedure, std::allocator&lt;Procedure&gt; &gt;::end (4 samples, 0.03%)</title><rect x="1047.2" y="293" width="0.4" height="15.0" fill="rgb(222,150,18)" rx="2" ry="2" />
<text  x="1050.23" y="303.5" ></text>
</g>
<g >
<title>native_write_msr (13 samples, 0.10%)</title><rect x="739.4" y="37" width="1.2" height="15.0" fill="rgb(227,63,3)" rx="2" ry="2" />
<text  x="742.42" y="47.5" ></text>
</g>
<g >
<title>sys_nanosleep (27 samples, 0.20%)</title><rect x="712.5" y="197" width="2.4" height="15.0" fill="rgb(209,93,35)" rx="2" ry="2" />
<text  x="715.49" y="207.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 0.03%)</title><rect x="1177.3" y="293" width="0.4" height="15.0" fill="rgb(221,212,17)" rx="2" ry="2" />
<text  x="1180.33" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::erase (12 samples, 0.09%)</title><rect x="720.5" y="245" width="1.1" height="15.0" fill="rgb(224,20,5)" rx="2" ry="2" />
<text  x="723.50" y="255.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (15 samples, 0.11%)</title><rect x="1188.7" y="405" width="1.3" height="15.0" fill="rgb(207,32,43)" rx="2" ry="2" />
<text  x="1191.68" y="415.5" ></text>
</g>
<g >
<title>deactivate_task (2 samples, 0.01%)</title><rect x="668.2" y="101" width="0.2" height="15.0" fill="rgb(251,137,40)" rx="2" ry="2" />
<text  x="671.22" y="111.5" ></text>
</g>
<g >
<title>native_write_msr (3 samples, 0.02%)</title><rect x="11.1" y="261" width="0.2" height="15.0" fill="rgb(242,107,14)" rx="2" ry="2" />
<text  x="14.06" y="271.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (4 samples, 0.03%)</title><rect x="11.0" y="405" width="0.3" height="15.0" fill="rgb(205,87,33)" rx="2" ry="2" />
<text  x="13.97" y="415.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (102 samples, 0.76%)</title><rect x="1179.6" y="261" width="9.0" height="15.0" fill="rgb(239,99,47)" rx="2" ry="2" />
<text  x="1182.61" y="271.5" ></text>
</g>
<g >
<title>lapic_next_deadline (2 samples, 0.01%)</title><rect x="712.6" y="101" width="0.2" height="15.0" fill="rgb(250,162,52)" rx="2" ry="2" />
<text  x="715.58" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (3 samples, 0.02%)</title><rect x="33.5" y="421" width="0.3" height="15.0" fill="rgb(210,144,31)" rx="2" ry="2" />
<text  x="36.50" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt; (9 samples, 0.07%)</title><rect x="724.4" y="261" width="0.8" height="15.0" fill="rgb(218,43,44)" rx="2" ry="2" />
<text  x="727.37" y="271.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (7 samples, 0.05%)</title><rect x="1178.5" y="245" width="0.6" height="15.0" fill="rgb(233,77,50)" rx="2" ry="2" />
<text  x="1181.47" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator&lt;int*&gt; (2 samples, 0.01%)</title><rect x="662.2" y="229" width="0.2" height="15.0" fill="rgb(247,159,3)" rx="2" ry="2" />
<text  x="665.23" y="239.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (7 samples, 0.05%)</title><rect x="726.3" y="245" width="0.6" height="15.0" fill="rgb(246,18,43)" rx="2" ry="2" />
<text  x="729.31" y="255.5" ></text>
</g>
<g >
<title>finish_task_switch (13 samples, 0.10%)</title><rect x="763.2" y="117" width="1.1" height="15.0" fill="rgb(252,24,9)" rx="2" ry="2" />
<text  x="766.19" y="127.5" ></text>
</g>
<g >
<title>TxExecutor::LockRelease (108 samples, 0.81%)</title><rect x="659.0" y="261" width="9.5" height="15.0" fill="rgb(219,69,4)" rx="2" ry="2" />
<text  x="661.97" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::emplace_back&lt;unsigned long&amp;, Tuple*&amp;, char  (121 samples, 0.90%)</title><rect x="690.7" y="261" width="10.7" height="15.0" fill="rgb(219,24,9)" rx="2" ry="2" />
<text  x="693.75" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::operator++ (3 samples, 0.02%)</title><rect x="13.0" y="421" width="0.3" height="15.0" fill="rgb(222,125,47)" rx="2" ry="2" />
<text  x="15.99" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator+ (3 samples, 0.02%)</title><rect x="664.3" y="213" width="0.3" height="15.0" fill="rgb(245,111,37)" rx="2" ry="2" />
<text  x="667.34" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;SetElement&lt;Tuple&gt; &gt;::construct&lt;SetElement&lt;Tuple&gt;, unsigned long&amp;, Tuple*&amp;, char  (117 samples, 0.87%)</title><rect x="727.4" y="229" width="10.3" height="15.0" fill="rgb(226,125,17)" rx="2" ry="2" />
<text  x="730.37" y="239.5" ></text>
</g>
<g >
<title>rdtscp (7 samples, 0.05%)</title><rect x="1177.7" y="437" width="0.6" height="15.0" fill="rgb(211,105,31)" rx="2" ry="2" />
<text  x="1180.68" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (4 samples, 0.03%)</title><rect x="667.3" y="229" width="0.4" height="15.0" fill="rgb(239,213,7)" rx="2" ry="2" />
<text  x="670.34" y="239.5" ></text>
</g>
<g >
<title>schedule_timeout (4 samples, 0.03%)</title><rect x="1074.4" y="197" width="0.4" height="15.0" fill="rgb(222,124,42)" rx="2" ry="2" />
<text  x="1077.43" y="207.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (56 samples, 0.42%)</title><rect x="681.9" y="229" width="5.0" height="15.0" fill="rgb(216,187,23)" rx="2" ry="2" />
<text  x="684.95" y="239.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge_list (17 samples, 0.13%)</title><rect x="1173.8" y="229" width="1.5" height="15.0" fill="rgb(228,176,51)" rx="2" ry="2" />
<text  x="1176.80" y="239.5" ></text>
</g>
<g >
<title>dequeue_task_fair (2 samples, 0.01%)</title><rect x="668.2" y="85" width="0.2" height="15.0" fill="rgb(207,192,22)" rx="2" ry="2" />
<text  x="671.22" y="95.5" ></text>
</g>
<g >
<title>sys_read (5 samples, 0.04%)</title><rect x="1074.3" y="293" width="0.5" height="15.0" fill="rgb(214,87,43)" rx="2" ry="2" />
<text  x="1077.34" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::begin (4 samples, 0.03%)</title><rect x="33.1" y="421" width="0.4" height="15.0" fill="rgb(212,217,23)" rx="2" ry="2" />
<text  x="36.15" y="431.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (34 samples, 0.25%)</title><rect x="752.3" y="229" width="3.0" height="15.0" fill="rgb(252,78,6)" rx="2" ry="2" />
<text  x="755.28" y="239.5" ></text>
</g>
<g >
<title>loadAcquire&lt;bool const&gt; (55 samples, 0.41%)</title><rect x="22.1" y="421" width="4.9" height="15.0" fill="rgb(211,91,47)" rx="2" ry="2" />
<text  x="25.15" y="431.5" ></text>
</g>
<g >
<title>RWLock::w_unlock (56 samples, 0.42%)</title><rect x="681.9" y="261" width="5.0" height="15.0" fill="rgb(232,10,19)" rx="2" ry="2" />
<text  x="684.95" y="271.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (5 samples, 0.04%)</title><rect x="1177.7" y="373" width="0.4" height="15.0" fill="rgb(222,101,2)" rx="2" ry="2" />
<text  x="1180.68" y="383.5" ></text>
</g>
<g >
<title>schedule (24 samples, 0.18%)</title><rect x="712.8" y="149" width="2.1" height="15.0" fill="rgb(227,76,24)" rx="2" ry="2" />
<text  x="715.75" y="159.5" ></text>
</g>
<g >
<title>TxExecutor::get_tuple (4 samples, 0.03%)</title><rect x="669.7" y="277" width="0.4" height="15.0" fill="rgb(248,101,25)" rx="2" ry="2" />
<text  x="672.71" y="287.5" ></text>
</g>
<g >
<title>TxExecutor::checkWound (19 samples, 0.14%)</title><rect x="689.1" y="261" width="1.6" height="15.0" fill="rgb(206,116,29)" rx="2" ry="2" />
<text  x="692.08" y="271.5" ></text>
</g>
<g >
<title>TxExecutor::concat (3 samples, 0.02%)</title><rect x="657.1" y="245" width="0.3" height="15.0" fill="rgb(219,81,27)" rx="2" ry="2" />
<text  x="660.13" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int const&amp;&gt; (6 samples, 0.04%)</title><rect x="755.6" y="229" width="0.5" height="15.0" fill="rgb(228,217,23)" rx="2" ry="2" />
<text  x="758.62" y="239.5" ></text>
</g>
<g >
<title>hrtimer_start_range_ns (3 samples, 0.02%)</title><rect x="738.1" y="149" width="0.3" height="15.0" fill="rgb(249,63,48)" rx="2" ry="2" />
<text  x="741.10" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::operator++ (4 samples, 0.03%)</title><rect x="764.6" y="277" width="0.4" height="15.0" fill="rgb(205,42,50)" rx="2" ry="2" />
<text  x="767.60" y="287.5" ></text>
</g>
<g >
<title>lapic_next_deadline (2 samples, 0.01%)</title><rect x="738.2" y="101" width="0.2" height="15.0" fill="rgb(241,134,43)" rx="2" ry="2" />
<text  x="741.19" y="111.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.03%)</title><rect x="11.0" y="421" width="0.3" height="15.0" fill="rgb(252,190,31)" rx="2" ry="2" />
<text  x="13.97" y="431.5" ></text>
</g>
<g >
<title>worker (131 samples, 0.98%)</title><rect x="1178.5" y="437" width="11.5" height="15.0" fill="rgb(234,147,53)" rx="2" ry="2" />
<text  x="1181.47" y="447.5" ></text>
</g>
<g >
<title>TxExecutor::cascadeAbort (2 samples, 0.01%)</title><rect x="757.6" y="229" width="0.1" height="15.0" fill="rgb(223,167,18)" rx="2" ry="2" />
<text  x="760.56" y="239.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (16 samples, 0.12%)</title><rect x="713.4" y="53" width="1.4" height="15.0" fill="rgb(206,211,35)" rx="2" ry="2" />
<text  x="716.37" y="63.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (7 samples, 0.05%)</title><rect x="10.3" y="421" width="0.6" height="15.0" fill="rgb(224,58,20)" rx="2" ry="2" />
<text  x="13.26" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::begin (5 samples, 0.04%)</title><rect x="766.5" y="277" width="0.5" height="15.0" fill="rgb(212,193,48)" rx="2" ry="2" />
<text  x="769.53" y="287.5" ></text>
</g>
<g >
<title>__schedule (5 samples, 0.04%)</title><rect x="1177.2" y="357" width="0.5" height="15.0" fill="rgb(236,50,2)" rx="2" ry="2" />
<text  x="1180.24" y="367.5" ></text>
</g>
<g >
<title>__pow (46 samples, 0.34%)</title><rect x="1041.0" y="261" width="4.0" height="15.0" fill="rgb(238,0,52)" rx="2" ry="2" />
<text  x="1043.98" y="271.5" ></text>
</g>
<g >
<title>sys_nanosleep (2 samples, 0.01%)</title><rect x="657.4" y="181" width="0.2" height="15.0" fill="rgb(241,35,12)" rx="2" ry="2" />
<text  x="660.39" y="191.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (6 samples, 0.04%)</title><rect x="10.3" y="389" width="0.5" height="15.0" fill="rgb(251,7,19)" rx="2" ry="2" />
<text  x="13.26" y="399.5" ></text>
</g>
<g >
<title>TxExecutor::abort (6,243 samples, 46.57%)</title><rect x="108.6" y="293" width="549.5" height="15.0" fill="rgb(219,213,41)" rx="2" ry="2" />
<text  x="111.58" y="303.5" >TxExecutor::abort</text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (8 samples, 0.06%)</title><rect x="763.6" y="53" width="0.7" height="15.0" fill="rgb(251,36,13)" rx="2" ry="2" />
<text  x="766.63" y="63.5" ></text>
</g>
<g >
<title>__ieee754_pow_fma (45 samples, 0.34%)</title><rect x="1041.1" y="245" width="3.9" height="15.0" fill="rgb(236,169,39)" rx="2" ry="2" />
<text  x="1044.07" y="255.5" ></text>
</g>
<g >
<title>RWLock::w_trylock (89 samples, 0.66%)</title><rect x="744.4" y="261" width="7.8" height="15.0" fill="rgb(242,106,51)" rx="2" ry="2" />
<text  x="747.35" y="271.5" ></text>
</g>
<g >
<title>Tuple::ownersAdd (10 samples, 0.07%)</title><rect x="755.3" y="261" width="0.8" height="15.0" fill="rgb(239,228,1)" rx="2" ry="2" />
<text  x="758.27" y="271.5" ></text>
</g>
<g >
<title>TxExecutor::unlockList (37 samples, 0.28%)</title><rect x="654.8" y="277" width="3.3" height="15.0" fill="rgb(236,1,2)" rx="2" ry="2" />
<text  x="657.84" y="287.5" ></text>
</g>
<g >
<title>RWLock::w_unlock (8 samples, 0.06%)</title><rect x="660.4" y="245" width="0.7" height="15.0" fill="rgb(218,166,48)" rx="2" ry="2" />
<text  x="663.38" y="255.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_out (3 samples, 0.02%)</title><rect x="704.0" y="117" width="0.2" height="15.0" fill="rgb(248,123,52)" rx="2" ry="2" />
<text  x="706.95" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::construct&lt;int, int const&amp;&gt; (13 samples, 0.10%)</title><rect x="687.1" y="213" width="1.1" height="15.0" fill="rgb(223,48,15)" rx="2" ry="2" />
<text  x="690.05" y="223.5" ></text>
</g>
<g >
<title>schedule (4 samples, 0.03%)</title><rect x="1074.4" y="181" width="0.4" height="15.0" fill="rgb(217,188,7)" rx="2" ry="2" />
<text  x="1077.43" y="191.5" ></text>
</g>
<g >
<title>schedule (16 samples, 0.12%)</title><rect x="704.0" y="149" width="1.4" height="15.0" fill="rgb(243,23,15)" rx="2" ry="2" />
<text  x="706.95" y="159.5" ></text>
</g>
<g >
<title>unmap_page_range (1,139 samples, 8.50%)</title><rect x="1075.6" y="293" width="100.2" height="15.0" fill="rgb(247,113,14)" rx="2" ry="2" />
<text  x="1078.57" y="303.5" >unmap_page_r..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::operator++ (2 samples, 0.01%)</title><rect x="709.8" y="261" width="0.1" height="15.0" fill="rgb(223,103,10)" rx="2" ry="2" />
<text  x="712.76" y="271.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (12 samples, 0.09%)</title><rect x="1188.9" y="293" width="1.1" height="15.0" fill="rgb(212,8,39)" rx="2" ry="2" />
<text  x="1191.94" y="303.5" ></text>
</g>
<g >
<title>tick_program_event (2 samples, 0.01%)</title><rect x="712.6" y="133" width="0.2" height="15.0" fill="rgb(214,107,18)" rx="2" ry="2" />
<text  x="715.58" y="143.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (11,816 samples, 88.14%)</title><rect x="34.0" y="405" width="1040.1" height="15.0" fill="rgb(220,7,41)" rx="2" ry="2" />
<text  x="37.03" y="415.5" >[libstdc++.so.6.0.25]</text>
</g>
<g >
<title>__schedule (15 samples, 0.11%)</title><rect x="1188.7" y="357" width="1.3" height="15.0" fill="rgb(210,58,26)" rx="2" ry="2" />
<text  x="1191.68" y="367.5" ></text>
</g>
<g >
<title>TxExecutor::woundRelease (9 samples, 0.07%)</title><rect x="757.2" y="245" width="0.8" height="15.0" fill="rgb(239,74,41)" rx="2" ry="2" />
<text  x="760.20" y="255.5" ></text>
</g>
<g >
<title>loadAcquire&lt;bool const&gt; (921 samples, 6.87%)</title><rect x="957.1" y="293" width="81.1" height="15.0" fill="rgb(226,28,9)" rx="2" ry="2" />
<text  x="960.10" y="303.5" >loadAcqui..</text>
</g>
<g >
<title>flush_smp_call_function_queue (16 samples, 0.12%)</title><rect x="1175.8" y="373" width="1.4" height="15.0" fill="rgb(227,16,38)" rx="2" ry="2" />
<text  x="1178.83" y="383.5" ></text>
</g>
<g >
<title>TxExecutor::PromoteWaiters (5 samples, 0.04%)</title><rect x="722.5" y="261" width="0.5" height="15.0" fill="rgb(230,39,36)" rx="2" ry="2" />
<text  x="725.52" y="271.5" ></text>
</g>
<g >
<title>sys_nanosleep (31 samples, 0.23%)</title><rect x="738.0" y="197" width="2.7" height="15.0" fill="rgb(244,49,32)" rx="2" ry="2" />
<text  x="741.02" y="207.5" ></text>
</g>
<g >
<title>schedule (27 samples, 0.20%)</title><rect x="738.4" y="149" width="2.3" height="15.0" fill="rgb(216,167,7)" rx="2" ry="2" />
<text  x="741.37" y="159.5" ></text>
</g>
<g >
<title>std::forward&lt;char  (2 samples, 0.01%)</title><rect x="737.8" y="245" width="0.2" height="15.0" fill="rgb(218,188,36)" rx="2" ry="2" />
<text  x="740.84" y="255.5" ></text>
</g>
<g >
<title>main (6 samples, 0.04%)</title><rect x="1074.3" y="405" width="0.6" height="15.0" fill="rgb(237,159,7)" rx="2" ry="2" />
<text  x="1077.34" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (2 samples, 0.01%)</title><rect x="688.9" y="245" width="0.2" height="15.0" fill="rgb(245,105,32)" rx="2" ry="2" />
<text  x="691.90" y="255.5" ></text>
</g>
<g >
<title>scheduler_tick (3 samples, 0.02%)</title><rect x="1177.9" y="309" width="0.2" height="15.0" fill="rgb(225,195,52)" rx="2" ry="2" />
<text  x="1180.85" y="319.5" ></text>
</g>
<g >
<title>TxExecutor::get_tuple (6 samples, 0.04%)</title><rect x="723.1" y="277" width="0.6" height="15.0" fill="rgb(214,205,2)" rx="2" ry="2" />
<text  x="726.14" y="287.5" ></text>
</g>
<g >
<title>_mm_pause (2,277 samples, 16.98%)</title><rect x="204.6" y="261" width="200.4" height="15.0" fill="rgb(218,34,17)" rx="2" ry="2" />
<text  x="207.61" y="271.5" >_mm_pause</text>
</g>
<g >
<title>__schedule (27 samples, 0.20%)</title><rect x="738.4" y="133" width="2.3" height="15.0" fill="rgb(242,75,15)" rx="2" ry="2" />
<text  x="741.37" y="143.5" ></text>
</g>
<g >
<title>__GI___nanosleep (30 samples, 0.22%)</title><rect x="712.2" y="245" width="2.7" height="15.0" fill="rgb(220,219,29)" rx="2" ry="2" />
<text  x="715.23" y="255.5" ></text>
</g>
<g >
<title>sys_exit_group (1,146 samples, 8.55%)</title><rect x="1075.0" y="405" width="100.8" height="15.0" fill="rgb(232,166,3)" rx="2" ry="2" />
<text  x="1077.96" y="415.5" >sys_exit_group</text>
</g>
<g >
<title>Tuple::sortAdd (11 samples, 0.08%)</title><rect x="721.6" y="261" width="0.9" height="15.0" fill="rgb(244,143,41)" rx="2" ry="2" />
<text  x="724.56" y="271.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (11 samples, 0.08%)</title><rect x="719.3" y="245" width="0.9" height="15.0" fill="rgb(245,32,28)" rx="2" ry="2" />
<text  x="722.27" y="255.5" ></text>
</g>
<g >
<title>RWLock::w_trylock (87 samples, 0.65%)</title><rect x="744.5" y="245" width="7.7" height="15.0" fill="rgb(216,204,37)" rx="2" ry="2" />
<text  x="747.53" y="255.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (7 samples, 0.05%)</title><rect x="1177.7" y="421" width="0.6" height="15.0" fill="rgb(243,17,35)" rx="2" ry="2" />
<text  x="1180.68" y="431.5" ></text>
</g>
<g >
<title>makeProcedure (68 samples, 0.51%)</title><rect x="1039.0" y="277" width="6.0" height="15.0" fill="rgb(248,109,47)" rx="2" ry="2" />
<text  x="1042.05" y="287.5" ></text>
</g>
<g >
<title>_vm_normal_page (6 samples, 0.04%)</title><rect x="1075.0" y="293" width="0.6" height="15.0" fill="rgb(254,141,7)" rx="2" ry="2" />
<text  x="1078.05" y="303.5" ></text>
</g>
<g >
<title>bamboo.exe (13,406 samples, 100.00%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(248,9,3)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >bamboo.exe</text>
</g>
<g >
<title>TxExecutor::woundRelease (3 samples, 0.02%)</title><rect x="689.6" y="245" width="0.3" height="15.0" fill="rgb(225,137,40)" rx="2" ry="2" />
<text  x="692.60" y="255.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (5 samples, 0.04%)</title><rect x="1177.2" y="389" width="0.5" height="15.0" fill="rgb(216,160,28)" rx="2" ry="2" />
<text  x="1180.24" y="399.5" ></text>
</g>
<g >
<title>smp_call_function_single_interrupt (102 samples, 0.76%)</title><rect x="1179.6" y="405" width="9.0" height="15.0" fill="rgb(206,182,28)" rx="2" ry="2" />
<text  x="1182.61" y="415.5" ></text>
</g>
<g >
<title>__perf_event_enable (16 samples, 0.12%)</title><rect x="1175.8" y="325" width="1.4" height="15.0" fill="rgb(235,2,49)" rx="2" ry="2" />
<text  x="1178.83" y="335.5" ></text>
</g>
<g >
<title>do_nanosleep (16 samples, 0.12%)</title><rect x="704.0" y="165" width="1.4" height="15.0" fill="rgb(208,60,38)" rx="2" ry="2" />
<text  x="706.95" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::base (4 samples, 0.03%)</title><rect x="710.6" y="245" width="0.4" height="15.0" fill="rgb(253,132,11)" rx="2" ry="2" />
<text  x="713.64" y="255.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (11,816 samples, 88.14%)</title><rect x="34.0" y="373" width="1040.1" height="15.0" fill="rgb(247,125,28)" rx="2" ry="2" />
<text  x="37.03" y="383.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (103 samples, 0.77%)</title><rect x="691.7" y="197" width="9.1" height="15.0" fill="rgb(228,58,22)" rx="2" ry="2" />
<text  x="694.72" y="207.5" ></text>
</g>
<g >
<title>TxExecutor::PromoteWaiters (4 samples, 0.03%)</title><rect x="667.3" y="245" width="0.4" height="15.0" fill="rgb(250,7,17)" rx="2" ry="2" />
<text  x="670.34" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::base (2 samples, 0.01%)</title><rect x="707.5" y="245" width="0.1" height="15.0" fill="rgb(218,155,24)" rx="2" ry="2" />
<text  x="710.47" y="255.5" ></text>
</g>
<g >
<title>schedule (4 samples, 0.03%)</title><rect x="11.0" y="373" width="0.3" height="15.0" fill="rgb(213,52,47)" rx="2" ry="2" />
<text  x="13.97" y="383.5" ></text>
</g>
<g >
<title>SetElement&lt;Tuple&gt;::SetElement (105 samples, 0.78%)</title><rect x="691.6" y="213" width="9.3" height="15.0" fill="rgb(224,95,15)" rx="2" ry="2" />
<text  x="694.63" y="223.5" ></text>
</g>
<g >
<title>__vfs_read (5 samples, 0.04%)</title><rect x="1074.3" y="261" width="0.5" height="15.0" fill="rgb(233,132,45)" rx="2" ry="2" />
<text  x="1077.34" y="271.5" ></text>
</g>
<g >
<title>event_function (7 samples, 0.05%)</title><rect x="1178.5" y="325" width="0.6" height="15.0" fill="rgb(218,50,18)" rx="2" ry="2" />
<text  x="1181.47" y="335.5" ></text>
</g>
<g >
<title>Tuple::remove (13 samples, 0.10%)</title><rect x="655.9" y="245" width="1.1" height="15.0" fill="rgb(209,136,53)" rx="2" ry="2" />
<text  x="658.89" y="255.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (7 samples, 0.05%)</title><rect x="10.3" y="405" width="0.6" height="15.0" fill="rgb(222,71,4)" rx="2" ry="2" />
<text  x="13.26" y="415.5" ></text>
</g>
<g >
<title>TxExecutor::spinWait (169 samples, 1.26%)</title><rect x="725.9" y="277" width="14.8" height="15.0" fill="rgb(226,107,13)" rx="2" ry="2" />
<text  x="728.87" y="287.5" ></text>
</g>
<g >
<title>page_remove_rmap (41 samples, 0.31%)</title><rect x="1085.1" y="277" width="3.6" height="15.0" fill="rgb(241,189,4)" rx="2" ry="2" />
<text  x="1088.08" y="287.5" ></text>
</g>
<g >
<title>tick_do_update_jiffies64.part.11 (2 samples, 0.01%)</title><rect x="1177.7" y="325" width="0.2" height="15.0" fill="rgb(234,85,12)" rx="2" ry="2" />
<text  x="1180.68" y="335.5" ></text>
</g>
<g >
<title>intel_bts_enable_local (2 samples, 0.01%)</title><rect x="763.6" y="37" width="0.2" height="15.0" fill="rgb(209,36,47)" rx="2" ry="2" />
<text  x="766.63" y="47.5" ></text>
</g>
<g >
<title>native_write_msr (100 samples, 0.75%)</title><rect x="1179.8" y="245" width="8.8" height="15.0" fill="rgb(252,100,22)" rx="2" ry="2" />
<text  x="1182.79" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (2 samples, 0.01%)</title><rect x="663.6" y="213" width="0.2" height="15.0" fill="rgb(252,190,23)" rx="2" ry="2" />
<text  x="666.64" y="223.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (8 samples, 0.06%)</title><rect x="763.6" y="69" width="0.7" height="15.0" fill="rgb(216,174,27)" rx="2" ry="2" />
<text  x="766.63" y="79.5" ></text>
</g>
<g >
<title>__dec_node_state (5 samples, 0.04%)</title><rect x="1088.0" y="245" width="0.4" height="15.0" fill="rgb(205,223,49)" rx="2" ry="2" />
<text  x="1090.98" y="255.5" ></text>
</g>
<g >
<title>clockevents_program_event (2 samples, 0.01%)</title><rect x="712.6" y="117" width="0.2" height="15.0" fill="rgb(220,100,13)" rx="2" ry="2" />
<text  x="715.58" y="127.5" ></text>
</g>
<g >
<title>smp_call_function_single_interrupt (7 samples, 0.05%)</title><rect x="1178.5" y="389" width="0.6" height="15.0" fill="rgb(230,61,3)" rx="2" ry="2" />
<text  x="1181.47" y="399.5" ></text>
</g>
<g >
<title>n_tty_read (5 samples, 0.04%)</title><rect x="1074.3" y="229" width="0.5" height="15.0" fill="rgb(219,119,33)" rx="2" ry="2" />
<text  x="1077.34" y="239.5" ></text>
</g>
<g >
<title>x86_pmu_enable (8 samples, 0.06%)</title><rect x="763.6" y="85" width="0.7" height="15.0" fill="rgb(222,39,54)" rx="2" ry="2" />
<text  x="766.63" y="95.5" ></text>
</g>
<g >
<title>RWLock::w_trylock (11 samples, 0.08%)</title><rect x="659.4" y="245" width="1.0" height="15.0" fill="rgb(212,59,36)" rx="2" ry="2" />
<text  x="662.41" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::base (2 samples, 0.01%)</title><rect x="725.0" y="245" width="0.2" height="15.0" fill="rgb(239,54,25)" rx="2" ry="2" />
<text  x="727.99" y="255.5" ></text>
</g>
<g >
<title>__dec_node_page_state (7 samples, 0.05%)</title><rect x="1087.8" y="261" width="0.6" height="15.0" fill="rgb(238,95,10)" rx="2" ry="2" />
<text  x="1090.81" y="271.5" ></text>
</g>
<g >
<title>__mod_zone_page_state (9 samples, 0.07%)</title><rect x="1146.1" y="229" width="0.8" height="15.0" fill="rgb(232,188,27)" rx="2" ry="2" />
<text  x="1149.08" y="239.5" ></text>
</g>
<g >
<title>free_unref_page_prepare.part.65 (14 samples, 0.10%)</title><rect x="1172.3" y="213" width="1.2" height="15.0" fill="rgb(234,96,6)" rx="2" ry="2" />
<text  x="1175.31" y="223.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 0.03%)</title><rect x="1177.3" y="309" width="0.4" height="15.0" fill="rgb(253,199,49)" rx="2" ry="2" />
<text  x="1180.33" y="319.5" ></text>
</g>
<g >
<title>schedule (3 samples, 0.02%)</title><rect x="668.2" y="133" width="0.3" height="15.0" fill="rgb(212,70,28)" rx="2" ry="2" />
<text  x="671.22" y="143.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (10 samples, 0.07%)</title><rect x="765.7" y="277" width="0.8" height="15.0" fill="rgb(235,226,6)" rx="2" ry="2" />
<text  x="768.65" y="287.5" ></text>
</g>
<g >
<title>ctx_resched (7 samples, 0.05%)</title><rect x="1178.5" y="293" width="0.6" height="15.0" fill="rgb(224,189,2)" rx="2" ry="2" />
<text  x="1181.47" y="303.5" ></text>
</g>
<g >
<title>native_write_msr (9 samples, 0.07%)</title><rect x="1189.2" y="261" width="0.8" height="15.0" fill="rgb(233,144,11)" rx="2" ry="2" />
<text  x="1192.21" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="657.4" y="197" width="0.2" height="15.0" fill="rgb(221,154,5)" rx="2" ry="2" />
<text  x="660.39" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::__normal_iterator (5 samples, 0.04%)</title><rect x="12.1" y="421" width="0.5" height="15.0" fill="rgb(253,74,8)" rx="2" ry="2" />
<text  x="15.11" y="431.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (2 samples, 0.01%)</title><rect x="1178.1" y="325" width="0.2" height="15.0" fill="rgb(231,190,9)" rx="2" ry="2" />
<text  x="1181.12" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (4 samples, 0.03%)</title><rect x="690.4" y="245" width="0.3" height="15.0" fill="rgb(214,83,26)" rx="2" ry="2" />
<text  x="693.40" y="255.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.01%)</title><rect x="1178.1" y="389" width="0.2" height="15.0" fill="rgb(249,138,45)" rx="2" ry="2" />
<text  x="1181.12" y="399.5" ></text>
</g>
<g >
<title>scheduler_tick (2 samples, 0.01%)</title><rect x="1179.3" y="309" width="0.1" height="15.0" fill="rgb(232,226,30)" rx="2" ry="2" />
<text  x="1182.26" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (29 samples, 0.22%)</title><rect x="701.4" y="261" width="2.6" height="15.0" fill="rgb(225,124,1)" rx="2" ry="2" />
<text  x="704.40" y="271.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (102 samples, 0.76%)</title><rect x="1179.6" y="277" width="9.0" height="15.0" fill="rgb(217,33,16)" rx="2" ry="2" />
<text  x="1182.61" y="287.5" ></text>
</g>
<g >
<title>dequeue_task_fair (3 samples, 0.02%)</title><rect x="738.5" y="101" width="0.2" height="15.0" fill="rgb(240,50,7)" rx="2" ry="2" />
<text  x="741.46" y="111.5" ></text>
</g>
<g >
<title>RWLock::w_trylock (76 samples, 0.57%)</title><rect x="675.3" y="261" width="6.6" height="15.0" fill="rgb(228,82,25)" rx="2" ry="2" />
<text  x="678.26" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (16 samples, 0.12%)</title><rect x="762.9" y="213" width="1.4" height="15.0" fill="rgb(248,175,45)" rx="2" ry="2" />
<text  x="765.93" y="223.5" ></text>
</g>
<g >
<title>_vm_normal_page (3 samples, 0.02%)</title><rect x="1084.8" y="277" width="0.3" height="15.0" fill="rgb(215,7,39)" rx="2" ry="2" />
<text  x="1087.82" y="287.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (11,816 samples, 88.14%)</title><rect x="34.0" y="389" width="1040.1" height="15.0" fill="rgb(243,55,9)" rx="2" ry="2" />
<text  x="37.03" y="399.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>deactivate_task (3 samples, 0.02%)</title><rect x="738.5" y="117" width="0.2" height="15.0" fill="rgb(254,95,14)" rx="2" ry="2" />
<text  x="741.46" y="127.5" ></text>
</g>
<g >
<title>_mm_pause (2,149 samples, 16.03%)</title><rect x="767.7" y="293" width="189.1" height="15.0" fill="rgb(244,17,29)" rx="2" ry="2" />
<text  x="770.68" y="303.5" >_mm_pause</text>
</g>
<g >
<title>flush_smp_call_function_queue (7 samples, 0.05%)</title><rect x="1178.5" y="357" width="0.6" height="15.0" fill="rgb(224,101,54)" rx="2" ry="2" />
<text  x="1181.47" y="367.5" ></text>
</g>
<g >
<title>hrtimer_nanosleep (3 samples, 0.02%)</title><rect x="668.2" y="165" width="0.3" height="15.0" fill="rgb(212,53,48)" rx="2" ry="2" />
<text  x="671.22" y="175.5" ></text>
</g>
<g >
<title>RWLock::w_trylock (3 samples, 0.02%)</title><rect x="711.9" y="261" width="0.2" height="15.0" fill="rgb(248,113,6)" rx="2" ry="2" />
<text  x="714.87" y="271.5" ></text>
</g>
<g >
<title>do_nanosleep (16 samples, 0.12%)</title><rect x="762.9" y="165" width="1.4" height="15.0" fill="rgb(207,173,53)" rx="2" ry="2" />
<text  x="765.93" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::construct&lt;int, int const&amp;&gt; (5 samples, 0.04%)</title><rect x="755.6" y="213" width="0.5" height="15.0" fill="rgb(246,106,10)" rx="2" ry="2" />
<text  x="758.62" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::erase (8 samples, 0.06%)</title><rect x="656.2" y="229" width="0.7" height="15.0" fill="rgb(223,84,44)" rx="2" ry="2" />
<text  x="659.24" y="239.5" ></text>
</g>
<g >
<title>TxExecutor::spinWait (34 samples, 0.25%)</title><rect x="711.9" y="277" width="3.0" height="15.0" fill="rgb(220,154,49)" rx="2" ry="2" />
<text  x="714.87" y="287.5" ></text>
</g>
<g >
<title>Tuple::ownersRemove (15 samples, 0.11%)</title><rect x="720.2" y="261" width="1.4" height="15.0" fill="rgb(208,159,3)" rx="2" ry="2" />
<text  x="723.24" y="271.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (11,816 samples, 88.14%)</title><rect x="34.0" y="341" width="1040.1" height="15.0" fill="rgb(215,102,30)" rx="2" ry="2" />
<text  x="37.03" y="351.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>__perf_event_task_sched_in (8 samples, 0.06%)</title><rect x="763.6" y="101" width="0.7" height="15.0" fill="rgb(243,113,50)" rx="2" ry="2" />
<text  x="766.63" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::end (8 samples, 0.06%)</title><rect x="707.7" y="261" width="0.7" height="15.0" fill="rgb(246,213,0)" rx="2" ry="2" />
<text  x="710.74" y="271.5" ></text>
</g>
<g >
<title>vfs_read (5 samples, 0.04%)</title><rect x="1074.3" y="277" width="0.5" height="15.0" fill="rgb(251,30,2)" rx="2" ry="2" />
<text  x="1077.34" y="287.5" ></text>
</g>
<g >
<title>__GI___clone (11,817 samples, 88.15%)</title><rect x="34.0" y="437" width="1040.2" height="15.0" fill="rgb(248,189,32)" rx="2" ry="2" />
<text  x="37.03" y="447.5" >__GI___clone</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_erase (6 samples, 0.04%)</title><rect x="656.2" y="213" width="0.6" height="15.0" fill="rgb(221,168,46)" rx="2" ry="2" />
<text  x="659.24" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (5 samples, 0.04%)</title><rect x="758.6" y="245" width="0.5" height="15.0" fill="rgb(219,122,10)" rx="2" ry="2" />
<text  x="761.61" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (27 samples, 0.20%)</title><rect x="712.5" y="213" width="2.4" height="15.0" fill="rgb(228,64,49)" rx="2" ry="2" />
<text  x="715.49" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;Procedure, std::allocator&lt;Procedure&gt; &gt;::emplace_back&lt;Ope, unsigned long&amp;&gt; (21 samples, 0.16%)</title><rect x="1045.4" y="277" width="1.8" height="15.0" fill="rgb(247,113,37)" rx="2" ry="2" />
<text  x="1048.38" y="287.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (7 samples, 0.05%)</title><rect x="1178.5" y="261" width="0.6" height="15.0" fill="rgb(226,135,44)" rx="2" ry="2" />
<text  x="1181.47" y="271.5" ></text>
</g>
<g >
<title>getchar (5 samples, 0.04%)</title><rect x="1074.3" y="389" width="0.5" height="15.0" fill="rgb(252,13,41)" rx="2" ry="2" />
<text  x="1077.34" y="399.5" ></text>
</g>
<g >
<title>myBinarySearch (4 samples, 0.03%)</title><rect x="655.9" y="229" width="0.3" height="15.0" fill="rgb(235,180,35)" rx="2" ry="2" />
<text  x="658.89" y="239.5" ></text>
</g>
<g >
<title>native_write_msr (6 samples, 0.04%)</title><rect x="704.8" y="37" width="0.6" height="15.0" fill="rgb(214,99,24)" rx="2" ry="2" />
<text  x="707.83" y="47.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 0.03%)</title><rect x="1074.4" y="117" width="0.4" height="15.0" fill="rgb(229,44,42)" rx="2" ry="2" />
<text  x="1077.43" y="127.5" ></text>
</g>
<g >
<title>tick_sched_timer (4 samples, 0.03%)</title><rect x="1179.1" y="357" width="0.3" height="15.0" fill="rgb(248,1,19)" rx="2" ry="2" />
<text  x="1182.09" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::__normal_iterator (2 samples, 0.01%)</title><rect x="766.8" y="261" width="0.2" height="15.0" fill="rgb(237,93,8)" rx="2" ry="2" />
<text  x="769.80" y="271.5" ></text>
</g>
<g >
<title>_start (6 samples, 0.04%)</title><rect x="1074.3" y="437" width="0.6" height="15.0" fill="rgb(229,49,1)" rx="2" ry="2" />
<text  x="1077.34" y="447.5" ></text>
</g>
<g >
<title>Tuple::remove (65 samples, 0.48%)</title><rect x="661.6" y="245" width="5.7" height="15.0" fill="rgb(244,111,45)" rx="2" ry="2" />
<text  x="664.61" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="661.4" y="213" width="0.2" height="15.0" fill="rgb(231,167,38)" rx="2" ry="2" />
<text  x="664.44" y="223.5" ></text>
</g>
<g >
<title>Tuple::sortAdd (15 samples, 0.11%)</title><rect x="686.9" y="261" width="1.3" height="15.0" fill="rgb(232,208,24)" rx="2" ry="2" />
<text  x="689.88" y="271.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (12 samples, 0.09%)</title><rect x="1188.9" y="277" width="1.1" height="15.0" fill="rgb(223,119,12)" rx="2" ry="2" />
<text  x="1191.94" y="287.5" ></text>
</g>
<g >
<title>myBinarySearch (14 samples, 0.10%)</title><rect x="662.6" y="229" width="1.2" height="15.0" fill="rgb(213,19,24)" rx="2" ry="2" />
<text  x="665.58" y="239.5" ></text>
</g>
<g >
<title>__mod_zone_page_state (2 samples, 0.01%)</title><rect x="1091.9" y="245" width="0.1" height="15.0" fill="rgb(218,70,43)" rx="2" ry="2" />
<text  x="1094.86" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Procedure*, std::vector&lt;Procedure, std::allocator&lt;Procedure&gt; &gt; &gt;::__normal_iterator (2 samples, 0.01%)</title><rect x="1047.4" y="277" width="0.2" height="15.0" fill="rgb(211,188,27)" rx="2" ry="2" />
<text  x="1050.41" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (2 samples, 0.01%)</title><rect x="668.0" y="245" width="0.2" height="15.0" fill="rgb(247,151,31)" rx="2" ry="2" />
<text  x="671.04" y="255.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (4 samples, 0.03%)</title><rect x="11.0" y="325" width="0.3" height="15.0" fill="rgb(215,92,8)" rx="2" ry="2" />
<text  x="13.97" y="335.5" ></text>
</g>
<g >
<title>schedule (15 samples, 0.11%)</title><rect x="1188.7" y="373" width="1.3" height="15.0" fill="rgb(238,229,52)" rx="2" ry="2" />
<text  x="1191.68" y="383.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (6 samples, 0.04%)</title><rect x="1179.1" y="405" width="0.5" height="15.0" fill="rgb(210,197,7)" rx="2" ry="2" />
<text  x="1182.09" y="415.5" ></text>
</g>
<g >
<title>free_pcp_prepare (3 samples, 0.02%)</title><rect x="1153.8" y="213" width="0.3" height="15.0" fill="rgb(244,138,19)" rx="2" ry="2" />
<text  x="1156.82" y="223.5" ></text>
</g>
<g >
<title>RWLock::w_trylock (2 samples, 0.01%)</title><rect x="726.1" y="245" width="0.2" height="15.0" fill="rgb(224,23,45)" rx="2" ry="2" />
<text  x="729.13" y="255.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (2 samples, 0.01%)</title><rect x="1178.1" y="357" width="0.2" height="15.0" fill="rgb(230,13,7)" rx="2" ry="2" />
<text  x="1181.12" y="367.5" ></text>
</g>
<g >
<title>intel_bts_enable_local (3 samples, 0.02%)</title><rect x="739.2" y="37" width="0.2" height="15.0" fill="rgb(212,125,0)" rx="2" ry="2" />
<text  x="742.16" y="47.5" ></text>
</g>
<g >
<title>__schedule (24 samples, 0.18%)</title><rect x="712.8" y="133" width="2.1" height="15.0" fill="rgb(224,109,16)" rx="2" ry="2" />
<text  x="715.75" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::clear (3 samples, 0.02%)</title><rect x="668.8" y="277" width="0.3" height="15.0" fill="rgb(215,79,7)" rx="2" ry="2" />
<text  x="671.83" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (31 samples, 0.23%)</title><rect x="738.0" y="213" width="2.7" height="15.0" fill="rgb(253,38,11)" rx="2" ry="2" />
<text  x="741.02" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt; (13 samples, 0.10%)</title><rect x="706.5" y="261" width="1.1" height="15.0" fill="rgb(234,131,4)" rx="2" ry="2" />
<text  x="709.50" y="271.5" ></text>
</g>
<g >
<title>sys_nanosleep (16 samples, 0.12%)</title><rect x="762.9" y="197" width="1.4" height="15.0" fill="rgb(212,49,45)" rx="2" ry="2" />
<text  x="765.93" y="207.5" ></text>
</g>
<g >
<title>ctx_resched (16 samples, 0.12%)</title><rect x="1175.8" y="309" width="1.4" height="15.0" fill="rgb(212,123,10)" rx="2" ry="2" />
<text  x="1178.83" y="319.5" ></text>
</g>
<g >
<title>free_unref_page_commit (207 samples, 1.54%)</title><rect x="1154.1" y="213" width="18.2" height="15.0" fill="rgb(246,103,45)" rx="2" ry="2" />
<text  x="1157.09" y="223.5" ></text>
</g>
<g >
<title>remote_function (16 samples, 0.12%)</title><rect x="1175.8" y="357" width="1.4" height="15.0" fill="rgb(228,68,45)" rx="2" ry="2" />
<text  x="1178.83" y="367.5" ></text>
</g>
<g >
<title>__GI___nanosleep (31 samples, 0.23%)</title><rect x="738.0" y="245" width="2.7" height="15.0" fill="rgb(235,87,8)" rx="2" ry="2" />
<text  x="741.02" y="255.5" ></text>
</g>
<g >
<title>unmap_vmas (1,145 samples, 8.54%)</title><rect x="1075.0" y="325" width="100.8" height="15.0" fill="rgb(209,22,38)" rx="2" ry="2" />
<text  x="1078.05" y="335.5" >unmap_vmas</text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (34 samples, 0.25%)</title><rect x="752.3" y="245" width="3.0" height="15.0" fill="rgb(246,32,34)" rx="2" ry="2" />
<text  x="755.28" y="255.5" ></text>
</g>
<g >
<title>schedule (14 samples, 0.10%)</title><rect x="763.1" y="149" width="1.2" height="15.0" fill="rgb(234,199,28)" rx="2" ry="2" />
<text  x="766.10" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;Procedure, std::allocator&lt;Procedure&gt; &gt;::back (3 samples, 0.02%)</title><rect x="1047.0" y="261" width="0.2" height="15.0" fill="rgb(250,94,49)" rx="2" ry="2" />
<text  x="1049.97" y="271.5" ></text>
</g>
<g >
<title>TxExecutor::LockRelease (27 samples, 0.20%)</title><rect x="655.2" y="261" width="2.4" height="15.0" fill="rgb(242,149,10)" rx="2" ry="2" />
<text  x="658.19" y="271.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (5 samples, 0.04%)</title><rect x="726.5" y="229" width="0.4" height="15.0" fill="rgb(253,89,44)" rx="2" ry="2" />
<text  x="729.49" y="239.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (16 samples, 0.12%)</title><rect x="1175.8" y="261" width="1.4" height="15.0" fill="rgb(213,27,45)" rx="2" ry="2" />
<text  x="1178.83" y="271.5" ></text>
</g>
<g >
<title>TxExecutor::readlockAcquire (401 samples, 2.99%)</title><rect x="670.1" y="277" width="35.3" height="15.0" fill="rgb(252,120,25)" rx="2" ry="2" />
<text  x="673.06" y="287.5" >Tx..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (17 samples, 0.13%)</title><rect x="1151.1" y="229" width="1.5" height="15.0" fill="rgb(226,17,19)" rx="2" ry="2" />
<text  x="1154.10" y="239.5" ></text>
</g>
<g >
<title>__GI___nanosleep (17 samples, 0.13%)</title><rect x="762.8" y="245" width="1.5" height="15.0" fill="rgb(218,184,30)" rx="2" ry="2" />
<text  x="765.84" y="255.5" ></text>
</g>
<g >
<title>tick_sched_handle (6 samples, 0.04%)</title><rect x="10.3" y="341" width="0.5" height="15.0" fill="rgb(245,196,2)" rx="2" ry="2" />
<text  x="13.26" y="351.5" ></text>
</g>
<g >
<title>std::forward&lt;Ope&gt; (2 samples, 0.01%)</title><rect x="1045.1" y="277" width="0.2" height="15.0" fill="rgb(225,221,42)" rx="2" ry="2" />
<text  x="1048.12" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.02%)</title><rect x="668.2" y="213" width="0.3" height="15.0" fill="rgb(254,66,5)" rx="2" ry="2" />
<text  x="671.22" y="223.5" ></text>
</g>
<g >
<title>waitSema (301 samples, 2.25%)</title><rect x="1047.6" y="293" width="26.5" height="15.0" fill="rgb(211,190,41)" rx="2" ry="2" />
<text  x="1050.58" y="303.5" >w..</text>
</g>
<g >
<title>std::operator&amp; (3 samples, 0.02%)</title><rect x="32.8" y="421" width="0.3" height="15.0" fill="rgb(220,22,32)" rx="2" ry="2" />
<text  x="35.80" y="431.5" ></text>
</g>
<g >
<title>start_thread (11,817 samples, 88.15%)</title><rect x="34.0" y="421" width="1040.2" height="15.0" fill="rgb(205,9,29)" rx="2" ry="2" />
<text  x="37.03" y="431.5" >start_thread</text>
</g>
<g >
<title>uncharge_page (16 samples, 0.12%)</title><rect x="1173.9" y="213" width="1.4" height="15.0" fill="rgb(232,126,11)" rx="2" ry="2" />
<text  x="1176.89" y="223.5" ></text>
</g>
<g >
<title>TxExecutor::concat (4 samples, 0.03%)</title><rect x="667.7" y="245" width="0.3" height="15.0" fill="rgb(248,40,8)" rx="2" ry="2" />
<text  x="670.69" y="255.5" ></text>
</g>
<g >
<title>RWLock::w_trylock (10 samples, 0.07%)</title><rect x="659.5" y="229" width="0.9" height="15.0" fill="rgb(221,196,47)" rx="2" ry="2" />
<text  x="662.50" y="239.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (990 samples, 7.38%)</title><rect x="1088.7" y="261" width="87.1" height="15.0" fill="rgb(220,28,24)" rx="2" ry="2" />
<text  x="1091.69" y="271.5" >free_pages..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Procedure&gt;::construct&lt;Procedure, Ope, unsigned long&amp;&gt; (10 samples, 0.07%)</title><rect x="1046.0" y="245" width="0.9" height="15.0" fill="rgb(235,101,50)" rx="2" ry="2" />
<text  x="1049.00" y="255.5" ></text>
</g>
<g >
<title>event_function (16 samples, 0.12%)</title><rect x="1175.8" y="341" width="1.4" height="15.0" fill="rgb(222,151,21)" rx="2" ry="2" />
<text  x="1178.83" y="351.5" ></text>
</g>
<g >
<title>TxExecutor::addCommitSemaphore (3 samples, 0.02%)</title><rect x="756.2" y="261" width="0.3" height="15.0" fill="rgb(220,156,53)" rx="2" ry="2" />
<text  x="759.24" y="271.5" ></text>
</g>
<g >
<title>__schedule (4 samples, 0.03%)</title><rect x="11.0" y="357" width="0.3" height="15.0" fill="rgb(224,166,3)" rx="2" ry="2" />
<text  x="13.97" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt; (12 samples, 0.09%)</title><rect x="709.9" y="261" width="1.1" height="15.0" fill="rgb(226,109,13)" rx="2" ry="2" />
<text  x="712.94" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="757.7" y="229" width="0.2" height="15.0" fill="rgb(205,97,11)" rx="2" ry="2" />
<text  x="760.73" y="239.5" ></text>
</g>
<g >
<title>generic_smp_call_function_single_interrupt (7 samples, 0.05%)</title><rect x="1178.5" y="373" width="0.6" height="15.0" fill="rgb(229,152,54)" rx="2" ry="2" />
<text  x="1181.47" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (9 samples, 0.07%)</title><rect x="755.4" y="245" width="0.7" height="15.0" fill="rgb(247,102,19)" rx="2" ry="2" />
<text  x="758.36" y="255.5" ></text>
</g>
<g >
<title>TxExecutor::searchReadSet (35 samples, 0.26%)</title><rect x="705.4" y="277" width="3.0" height="15.0" fill="rgb(249,202,19)" rx="2" ry="2" />
<text  x="708.36" y="287.5" ></text>
</g>
<g >
<title>x86_pmu_enable (7 samples, 0.05%)</title><rect x="1178.5" y="277" width="0.6" height="15.0" fill="rgb(209,57,20)" rx="2" ry="2" />
<text  x="1181.47" y="287.5" ></text>
</g>
<g >
<title>hrtimer_nanosleep (16 samples, 0.12%)</title><rect x="762.9" y="181" width="1.4" height="15.0" fill="rgb(231,112,47)" rx="2" ry="2" />
<text  x="765.93" y="191.5" ></text>
</g>
<g >
<title>nohz_balance_exit_idle.part.98 (2 samples, 0.01%)</title><rect x="1177.9" y="277" width="0.2" height="15.0" fill="rgb(219,93,10)" rx="2" ry="2" />
<text  x="1180.94" y="287.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (3 samples, 0.02%)</title><rect x="655.6" y="213" width="0.3" height="15.0" fill="rgb(254,40,27)" rx="2" ry="2" />
<text  x="658.63" y="223.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (17 samples, 0.13%)</title><rect x="713.3" y="101" width="1.5" height="15.0" fill="rgb(250,99,39)" rx="2" ry="2" />
<text  x="716.28" y="111.5" ></text>
</g>
<g >
<title>usleep (17 samples, 0.13%)</title><rect x="762.8" y="261" width="1.5" height="15.0" fill="rgb(222,123,0)" rx="2" ry="2" />
<text  x="765.84" y="271.5" ></text>
</g>
<g >
<title>x86_pmu_enable (16 samples, 0.12%)</title><rect x="713.4" y="85" width="1.4" height="15.0" fill="rgb(230,55,2)" rx="2" ry="2" />
<text  x="716.37" y="95.5" ></text>
</g>
<g >
<title>finish_task_switch (4 samples, 0.03%)</title><rect x="1074.4" y="149" width="0.4" height="15.0" fill="rgb(211,131,17)" rx="2" ry="2" />
<text  x="1077.43" y="159.5" ></text>
</g>
<g >
<title>tick_sched_timer (5 samples, 0.04%)</title><rect x="1177.7" y="357" width="0.4" height="15.0" fill="rgb(216,138,33)" rx="2" ry="2" />
<text  x="1180.68" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.04%)</title><rect x="1074.3" y="325" width="0.5" height="15.0" fill="rgb(247,148,36)" rx="2" ry="2" />
<text  x="1077.34" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::construct&lt;SetElement&lt;Tuple&gt;, unsigned long&amp;, Tuple*&amp;, char  (111 samples, 0.83%)</title><rect x="691.2" y="245" width="9.8" height="15.0" fill="rgb(228,148,49)" rx="2" ry="2" />
<text  x="694.19" y="255.5" ></text>
</g>
<g >
<title>__perf_event_enable (102 samples, 0.76%)</title><rect x="1179.6" y="325" width="9.0" height="15.0" fill="rgb(213,156,48)" rx="2" ry="2" />
<text  x="1182.61" y="335.5" ></text>
</g>
<g >
<title>rdtscp (2,412 samples, 17.99%)</title><rect x="442.5" y="261" width="212.3" height="15.0" fill="rgb(248,172,30)" rx="2" ry="2" />
<text  x="445.53" y="271.5" >rdtscp</text>
</g>
<g >
<title>native_write_msr (6 samples, 0.04%)</title><rect x="1178.6" y="229" width="0.5" height="15.0" fill="rgb(218,42,5)" rx="2" ry="2" />
<text  x="1181.56" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::operator* (2 samples, 0.01%)</title><rect x="727.1" y="245" width="0.2" height="15.0" fill="rgb(228,37,49)" rx="2" ry="2" />
<text  x="730.10" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::end (2 samples, 0.01%)</title><rect x="715.0" y="277" width="0.1" height="15.0" fill="rgb(220,177,7)" rx="2" ry="2" />
<text  x="717.95" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (16 samples, 0.12%)</title><rect x="704.0" y="229" width="1.4" height="15.0" fill="rgb(252,143,52)" rx="2" ry="2" />
<text  x="706.95" y="239.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (5 samples, 0.04%)</title><rect x="1177.7" y="389" width="0.4" height="15.0" fill="rgb(233,86,53)" rx="2" ry="2" />
<text  x="1180.68" y="399.5" ></text>
</g>
<g >
<title>finish_task_switch (12 samples, 0.09%)</title><rect x="704.3" y="117" width="1.1" height="15.0" fill="rgb(232,35,5)" rx="2" ry="2" />
<text  x="707.30" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_read (5 samples, 0.04%)</title><rect x="1074.3" y="341" width="0.5" height="15.0" fill="rgb(249,145,42)" rx="2" ry="2" />
<text  x="1077.34" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::operator* (2 samples, 0.01%)</title><rect x="764.4" y="277" width="0.2" height="15.0" fill="rgb(221,28,44)" rx="2" ry="2" />
<text  x="767.42" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::base (2 samples, 0.01%)</title><rect x="709.2" y="261" width="0.2" height="15.0" fill="rgb(246,19,28)" rx="2" ry="2" />
<text  x="712.23" y="271.5" ></text>
</g>
<g >
<title>__exp1_fma (14 samples, 0.10%)</title><rect x="1041.7" y="229" width="1.2" height="15.0" fill="rgb(236,156,44)" rx="2" ry="2" />
<text  x="1044.69" y="239.5" ></text>
</g>
<g >
<title>loadAcquire&lt;unsigned long&gt; (2 samples, 0.01%)</title><rect x="956.9" y="277" width="0.2" height="15.0" fill="rgb(227,89,52)" rx="2" ry="2" />
<text  x="959.92" y="287.5" ></text>
</g>
<g >
<title>update_process_times (3 samples, 0.02%)</title><rect x="1177.9" y="325" width="0.2" height="15.0" fill="rgb(252,96,16)" rx="2" ry="2" />
<text  x="1180.85" y="335.5" ></text>
</g>
<g >
<title>mem_cgroup_update_lru_size (3 samples, 0.02%)</title><rect x="1175.3" y="229" width="0.3" height="15.0" fill="rgb(219,74,26)" rx="2" ry="2" />
<text  x="1178.30" y="239.5" ></text>
</g>
<g >
<title>leaderBackoffWork (3 samples, 0.02%)</title><rect x="956.8" y="293" width="0.3" height="15.0" fill="rgb(237,110,6)" rx="2" ry="2" />
<text  x="959.83" y="303.5" ></text>
</g>
<g >
<title>usleep (16 samples, 0.12%)</title><rect x="704.0" y="261" width="1.4" height="15.0" fill="rgb(219,13,42)" rx="2" ry="2" />
<text  x="706.95" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt; (8 samples, 0.06%)</title><rect x="765.0" y="277" width="0.7" height="15.0" fill="rgb(219,90,35)" rx="2" ry="2" />
<text  x="767.95" y="287.5" ></text>
</g>
<g >
<title>RWLock::w_trylock (3 samples, 0.02%)</title><rect x="711.9" y="245" width="0.2" height="15.0" fill="rgb(254,148,26)" rx="2" ry="2" />
<text  x="714.87" y="255.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (15 samples, 0.11%)</title><rect x="1188.7" y="421" width="1.3" height="15.0" fill="rgb(223,37,26)" rx="2" ry="2" />
<text  x="1191.68" y="431.5" ></text>
</g>
<g >
<title>tick_sched_timer (6 samples, 0.04%)</title><rect x="10.3" y="357" width="0.5" height="15.0" fill="rgb(245,51,28)" rx="2" ry="2" />
<text  x="13.26" y="367.5" ></text>
</g>
<g >
<title>TxExecutor::addCommitSemaphore (9 samples, 0.07%)</title><rect x="688.3" y="261" width="0.8" height="15.0" fill="rgb(205,174,0)" rx="2" ry="2" />
<text  x="691.28" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator+ (5 samples, 0.04%)</title><rect x="665.3" y="197" width="0.5" height="15.0" fill="rgb(241,19,41)" rx="2" ry="2" />
<text  x="668.31" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (3 samples, 0.02%)</title><rect x="664.6" y="213" width="0.3" height="15.0" fill="rgb(249,132,30)" rx="2" ry="2" />
<text  x="667.61" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator+ (3 samples, 0.02%)</title><rect x="720.9" y="213" width="0.3" height="15.0" fill="rgb(247,91,6)" rx="2" ry="2" />
<text  x="723.94" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (11,816 samples, 88.14%)</title><rect x="34.0" y="325" width="1040.1" height="15.0" fill="rgb(236,187,53)" rx="2" ry="2" />
<text  x="37.03" y="335.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>hrtimer_nanosleep (16 samples, 0.12%)</title><rect x="704.0" y="181" width="1.4" height="15.0" fill="rgb(215,80,11)" rx="2" ry="2" />
<text  x="706.95" y="191.5" ></text>
</g>
<g >
<title>x86_pmu_enable (12 samples, 0.09%)</title><rect x="1188.9" y="309" width="1.1" height="15.0" fill="rgb(245,214,4)" rx="2" ry="2" />
<text  x="1191.94" y="319.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (16 samples, 0.12%)</title><rect x="1175.8" y="277" width="1.4" height="15.0" fill="rgb(228,78,7)" rx="2" ry="2" />
<text  x="1178.83" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::end (8 samples, 0.06%)</title><rect x="711.2" y="261" width="0.7" height="15.0" fill="rgb(241,21,2)" rx="2" ry="2" />
<text  x="714.17" y="271.5" ></text>
</g>
<g >
<title>call_function_single_interrupt (102 samples, 0.76%)</title><rect x="1179.6" y="421" width="9.0" height="15.0" fill="rgb(247,142,45)" rx="2" ry="2" />
<text  x="1182.61" y="431.5" ></text>
</g>
<g >
<title>__GI___nanosleep (2 samples, 0.01%)</title><rect x="657.4" y="229" width="0.2" height="15.0" fill="rgb(230,30,37)" rx="2" ry="2" />
<text  x="660.39" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (42 samples, 0.31%)</title><rect x="759.1" y="261" width="3.7" height="15.0" fill="rgb(254,102,37)" rx="2" ry="2" />
<text  x="762.14" y="271.5" ></text>
</g>
<g >
<title>TxExecutor::read (523 samples, 3.90%)</title><rect x="669.1" y="293" width="46.0" height="15.0" fill="rgb(224,18,32)" rx="2" ry="2" />
<text  x="672.10" y="303.5" >TxEx..</text>
</g>
<g >
<title>free_pcppages_bulk (177 samples, 1.32%)</title><rect x="1156.7" y="197" width="15.6" height="15.0" fill="rgb(217,134,48)" rx="2" ry="2" />
<text  x="1159.73" y="207.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (2 samples, 0.01%)</title><rect x="1177.7" y="341" width="0.2" height="15.0" fill="rgb(205,161,16)" rx="2" ry="2" />
<text  x="1180.68" y="351.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow (5 samples, 0.04%)</title><rect x="1074.3" y="373" width="0.5" height="15.0" fill="rgb(208,194,36)" rx="2" ry="2" />
<text  x="1077.34" y="383.5" ></text>
</g>
<g >
<title>hrtimer_start_range_ns (2 samples, 0.01%)</title><rect x="712.6" y="149" width="0.2" height="15.0" fill="rgb(224,64,30)" rx="2" ry="2" />
<text  x="715.58" y="159.5" ></text>
</g>
<g >
<title>free_unref_page_prepare.part.65 (2 samples, 0.01%)</title><rect x="1173.5" y="229" width="0.2" height="15.0" fill="rgb(254,179,52)" rx="2" ry="2" />
<text  x="1176.54" y="239.5" ></text>
</g>
<g >
<title>RWLock::w_trylock (2 samples, 0.01%)</title><rect x="726.1" y="261" width="0.2" height="15.0" fill="rgb(241,201,17)" rx="2" ry="2" />
<text  x="729.13" y="271.5" ></text>
</g>
<g >
<title>RWLock::w_unlock (11 samples, 0.08%)</title><rect x="719.3" y="261" width="0.9" height="15.0" fill="rgb(217,0,5)" rx="2" ry="2" />
<text  x="722.27" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::construct&lt;SetElement&lt;Tuple&gt;, unsigned long&amp;, Tuple*&amp;, char  (120 samples, 0.90%)</title><rect x="727.3" y="245" width="10.5" height="15.0" fill="rgb(229,42,41)" rx="2" ry="2" />
<text  x="730.28" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (3 samples, 0.02%)</title><rect x="690.0" y="245" width="0.3" height="15.0" fill="rgb(209,213,2)" rx="2" ry="2" />
<text  x="693.04" y="255.5" ></text>
</g>
<g >
<title>RWLock::w_trylock (24 samples, 0.18%)</title><rect x="717.2" y="261" width="2.1" height="15.0" fill="rgb(241,144,9)" rx="2" ry="2" />
<text  x="720.16" y="271.5" ></text>
</g>
<g >
<title>sys_nanosleep (3 samples, 0.02%)</title><rect x="668.2" y="181" width="0.3" height="15.0" fill="rgb(245,191,45)" rx="2" ry="2" />
<text  x="671.22" y="191.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (6 samples, 0.04%)</title><rect x="1179.1" y="421" width="0.5" height="15.0" fill="rgb(236,34,22)" rx="2" ry="2" />
<text  x="1182.09" y="431.5" ></text>
</g>
<g >
<title>TxExecutor::unlockList (122 samples, 0.91%)</title><rect x="658.1" y="277" width="10.7" height="15.0" fill="rgb(229,146,38)" rx="2" ry="2" />
<text  x="661.09" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (16 samples, 0.12%)</title><rect x="762.9" y="229" width="1.4" height="15.0" fill="rgb(234,96,19)" rx="2" ry="2" />
<text  x="765.93" y="239.5" ></text>
</g>
<g >
<title>update_process_times (6 samples, 0.04%)</title><rect x="10.3" y="325" width="0.5" height="15.0" fill="rgb(218,19,38)" rx="2" ry="2" />
<text  x="13.26" y="335.5" ></text>
</g>
<g >
<title>makeProcedure (103 samples, 0.77%)</title><rect x="1038.2" y="293" width="9.0" height="15.0" fill="rgb(220,73,39)" rx="2" ry="2" />
<text  x="1041.17" y="303.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (11,816 samples, 88.14%)</title><rect x="34.0" y="357" width="1040.1" height="15.0" fill="rgb(252,154,27)" rx="2" ry="2" />
<text  x="37.03" y="367.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>__GI___nanosleep (3 samples, 0.02%)</title><rect x="668.2" y="229" width="0.3" height="15.0" fill="rgb(217,106,24)" rx="2" ry="2" />
<text  x="671.22" y="239.5" ></text>
</g>
<g >
<title>clockevents_program_event (2 samples, 0.01%)</title><rect x="738.2" y="117" width="0.2" height="15.0" fill="rgb(231,74,28)" rx="2" ry="2" />
<text  x="741.19" y="127.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (6 samples, 0.04%)</title><rect x="1179.1" y="389" width="0.5" height="15.0" fill="rgb(252,114,5)" rx="2" ry="2" />
<text  x="1182.09" y="399.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (4 samples, 0.03%)</title><rect x="1074.4" y="133" width="0.4" height="15.0" fill="rgb(219,95,29)" rx="2" ry="2" />
<text  x="1077.43" y="143.5" ></text>
</g>
<g >
<title>dequeue_entity (2 samples, 0.01%)</title><rect x="738.5" y="85" width="0.2" height="15.0" fill="rgb(240,179,44)" rx="2" ry="2" />
<text  x="741.54" y="95.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,146 samples, 8.55%)</title><rect x="1075.0" y="437" width="100.8" height="15.0" fill="rgb(224,178,5)" rx="2" ry="2" />
<text  x="1077.96" y="447.5" >entry_SYSCAL..</text>
</g>
<g >
<title>usleep (2 samples, 0.01%)</title><rect x="657.4" y="245" width="0.2" height="15.0" fill="rgb(245,101,22)" rx="2" ry="2" />
<text  x="660.39" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::__normal_iterator (2 samples, 0.01%)</title><rect x="767.2" y="261" width="0.2" height="15.0" fill="rgb(251,191,32)" rx="2" ry="2" />
<text  x="770.24" y="271.5" ></text>
</g>
<g >
<title>Xoroshiro128Plus::next (9 samples, 0.07%)</title><rect x="1040.1" y="261" width="0.8" height="15.0" fill="rgb(211,76,44)" rx="2" ry="2" />
<text  x="1043.10" y="271.5" ></text>
</g>
<g >
<title>__mod_zone_page_state (6 samples, 0.04%)</title><rect x="1171.6" y="181" width="0.5" height="15.0" fill="rgb(247,77,39)" rx="2" ry="2" />
<text  x="1174.60" y="191.5" ></text>
</g>
<g >
<title>__perf_event_enable (7 samples, 0.05%)</title><rect x="1178.5" y="309" width="0.6" height="15.0" fill="rgb(221,186,33)" rx="2" ry="2" />
<text  x="1181.47" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (27 samples, 0.20%)</title><rect x="712.5" y="229" width="2.4" height="15.0" fill="rgb(241,166,5)" rx="2" ry="2" />
<text  x="715.49" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_erase (21 samples, 0.16%)</title><rect x="665.0" y="213" width="1.8" height="15.0" fill="rgb(205,70,32)" rx="2" ry="2" />
<text  x="667.96" y="223.5" ></text>
</g>
<g >
<title>__schedule (3 samples, 0.02%)</title><rect x="668.2" y="117" width="0.3" height="15.0" fill="rgb(242,159,42)" rx="2" ry="2" />
<text  x="671.22" y="127.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (111 samples, 0.83%)</title><rect x="727.8" y="197" width="9.8" height="15.0" fill="rgb(243,217,0)" rx="2" ry="2" />
<text  x="730.81" y="207.5" ></text>
</g>
<g >
<title>task_ctx_sched_out (3 samples, 0.02%)</title><rect x="704.0" y="101" width="0.2" height="15.0" fill="rgb(214,95,6)" rx="2" ry="2" />
<text  x="706.95" y="111.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 0.03%)</title><rect x="1074.4" y="101" width="0.4" height="15.0" fill="rgb(221,25,27)" rx="2" ry="2" />
<text  x="1077.43" y="111.5" ></text>
</g>
<g >
<title>event_function (102 samples, 0.76%)</title><rect x="1179.6" y="341" width="9.0" height="15.0" fill="rgb(233,64,31)" rx="2" ry="2" />
<text  x="1182.61" y="351.5" ></text>
</g>
<g >
<title>TxExecutor::write (594 samples, 4.43%)</title><rect x="715.1" y="293" width="52.3" height="15.0" fill="rgb(217,28,18)" rx="2" ry="2" />
<text  x="718.13" y="303.5" >TxExe..</text>
</g>
<g >
<title>ctx_sched_out (3 samples, 0.02%)</title><rect x="704.0" y="85" width="0.2" height="15.0" fill="rgb(235,67,14)" rx="2" ry="2" />
<text  x="706.95" y="95.5" ></text>
</g>
<g >
<title>native_write_msr (3 samples, 0.02%)</title><rect x="1074.5" y="69" width="0.3" height="15.0" fill="rgb(234,82,23)" rx="2" ry="2" />
<text  x="1077.52" y="79.5" ></text>
</g>
<g >
<title>worker (11,816 samples, 88.14%)</title><rect x="34.0" y="309" width="1040.1" height="15.0" fill="rgb(244,50,34)" rx="2" ry="2" />
<text  x="37.03" y="319.5" >worker</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::cbegin (3 samples, 0.02%)</title><rect x="667.1" y="213" width="0.2" height="15.0" fill="rgb(215,218,24)" rx="2" ry="2" />
<text  x="670.07" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (13 samples, 0.10%)</title><rect x="687.1" y="245" width="1.1" height="15.0" fill="rgb(239,134,50)" rx="2" ry="2" />
<text  x="690.05" y="255.5" ></text>
</g>
<g >
<title>_mm_pause (7 samples, 0.05%)</title><rect x="1178.5" y="421" width="0.6" height="15.0" fill="rgb(246,104,35)" rx="2" ry="2" />
<text  x="1181.47" y="431.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="1178.1" y="373" width="0.2" height="15.0" fill="rgb(210,47,49)" rx="2" ry="2" />
<text  x="1181.12" y="383.5" ></text>
</g>
<g >
<title>tick_program_event (2 samples, 0.01%)</title><rect x="738.2" y="133" width="0.2" height="15.0" fill="rgb(209,158,16)" rx="2" ry="2" />
<text  x="741.19" y="143.5" ></text>
</g>
<g >
<title>uncharge_page (3 samples, 0.02%)</title><rect x="1175.6" y="229" width="0.2" height="15.0" fill="rgb(223,161,22)" rx="2" ry="2" />
<text  x="1178.56" y="239.5" ></text>
</g>
<g >
<title>__schedule (16 samples, 0.12%)</title><rect x="704.0" y="133" width="1.4" height="15.0" fill="rgb(209,18,7)" rx="2" ry="2" />
<text  x="706.95" y="143.5" ></text>
</g>
<g >
<title>free_pcp_prepare (2 samples, 0.01%)</title><rect x="1152.6" y="229" width="0.2" height="15.0" fill="rgb(250,121,40)" rx="2" ry="2" />
<text  x="1155.59" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (3 samples, 0.02%)</title><rect x="666.8" y="213" width="0.3" height="15.0" fill="rgb(205,62,19)" rx="2" ry="2" />
<text  x="669.81" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::erase (40 samples, 0.30%)</title><rect x="663.8" y="229" width="3.5" height="15.0" fill="rgb(213,59,38)" rx="2" ry="2" />
<text  x="666.81" y="239.5" ></text>
</g>
<g >
<title>remote_function (102 samples, 0.76%)</title><rect x="1179.6" y="357" width="9.0" height="15.0" fill="rgb(231,89,19)" rx="2" ry="2" />
<text  x="1182.61" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::__normal_iterator (3 samples, 0.02%)</title><rect x="711.6" y="245" width="0.3" height="15.0" fill="rgb(239,54,21)" rx="2" ry="2" />
<text  x="714.61" y="255.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (9 samples, 0.07%)</title><rect x="704.6" y="69" width="0.8" height="15.0" fill="rgb(225,56,22)" rx="2" ry="2" />
<text  x="707.57" y="79.5" ></text>
</g>
<g >
<title>trigger_load_balance (4 samples, 0.03%)</title><rect x="10.4" y="293" width="0.4" height="15.0" fill="rgb(213,157,48)" rx="2" ry="2" />
<text  x="13.44" y="303.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (16 samples, 0.12%)</title><rect x="739.2" y="69" width="1.4" height="15.0" fill="rgb(224,39,15)" rx="2" ry="2" />
<text  x="742.16" y="79.5" ></text>
</g>
<g >
<title>scheduler_tick (6 samples, 0.04%)</title><rect x="10.3" y="309" width="0.5" height="15.0" fill="rgb(214,113,40)" rx="2" ry="2" />
<text  x="13.26" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (31 samples, 0.23%)</title><rect x="738.0" y="229" width="2.7" height="15.0" fill="rgb(232,199,33)" rx="2" ry="2" />
<text  x="741.02" y="239.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (56 samples, 0.42%)</title><rect x="681.9" y="245" width="5.0" height="15.0" fill="rgb(215,14,49)" rx="2" ry="2" />
<text  x="684.95" y="255.5" ></text>
</g>
<g >
<title>schedule (5 samples, 0.04%)</title><rect x="1177.2" y="373" width="0.5" height="15.0" fill="rgb(207,126,35)" rx="2" ry="2" />
<text  x="1180.24" y="383.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (16 samples, 0.12%)</title><rect x="739.2" y="53" width="1.4" height="15.0" fill="rgb(236,214,7)" rx="2" ry="2" />
<text  x="742.16" y="63.5" ></text>
</g>
<g >
<title>do_group_exit (1,146 samples, 8.55%)</title><rect x="1075.0" y="389" width="100.8" height="15.0" fill="rgb(235,75,41)" rx="2" ry="2" />
<text  x="1077.96" y="399.5" >do_group_exit</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (3 samples, 0.02%)</title><rect x="722.3" y="245" width="0.2" height="15.0" fill="rgb(209,47,6)" rx="2" ry="2" />
<text  x="725.26" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,146 samples, 8.55%)</title><rect x="1075.0" y="421" width="100.8" height="15.0" fill="rgb(209,202,4)" rx="2" ry="2" />
<text  x="1077.96" y="431.5" >do_syscall_64</text>
</g>
<g >
<title>do_nanosleep (3 samples, 0.02%)</title><rect x="668.2" y="149" width="0.3" height="15.0" fill="rgb(225,97,21)" rx="2" ry="2" />
<text  x="671.22" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int const&amp;&gt; (4 samples, 0.03%)</title><rect x="721.9" y="229" width="0.4" height="15.0" fill="rgb(236,174,48)" rx="2" ry="2" />
<text  x="724.91" y="239.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.03%)</title><rect x="657.7" y="261" width="0.4" height="15.0" fill="rgb(212,214,32)" rx="2" ry="2" />
<text  x="660.74" y="271.5" ></text>
</g>
<g >
<title>exit_mmap (1,146 samples, 8.55%)</title><rect x="1075.0" y="341" width="100.8" height="15.0" fill="rgb(215,8,53)" rx="2" ry="2" />
<text  x="1077.96" y="351.5" >exit_mmap</text>
</g>
<g >
<title>__mod_node_page_state (7 samples, 0.05%)</title><rect x="1145.5" y="229" width="0.6" height="15.0" fill="rgb(225,22,11)" rx="2" ry="2" />
<text  x="1148.46" y="239.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (13 samples, 0.10%)</title><rect x="1188.9" y="325" width="1.1" height="15.0" fill="rgb(222,216,5)" rx="2" ry="2" />
<text  x="1191.86" y="335.5" ></text>
</g>
<g >
<title>__libc_start_main (6 samples, 0.04%)</title><rect x="1074.3" y="421" width="0.6" height="15.0" fill="rgb(235,2,42)" rx="2" ry="2" />
<text  x="1077.34" y="431.5" ></text>
</g>
<g >
<title>trigger_load_balance (2 samples, 0.01%)</title><rect x="1177.9" y="293" width="0.2" height="15.0" fill="rgb(220,57,0)" rx="2" ry="2" />
<text  x="1180.94" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::begin (2 samples, 0.01%)</title><rect x="711.0" y="261" width="0.2" height="15.0" fill="rgb(230,129,37)" rx="2" ry="2" />
<text  x="713.99" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::end (5 samples, 0.04%)</title><rect x="767.0" y="277" width="0.4" height="15.0" fill="rgb(206,212,36)" rx="2" ry="2" />
<text  x="769.97" y="287.5" ></text>
</g>
<g >
<title>tick_sched_handle (3 samples, 0.02%)</title><rect x="1177.9" y="341" width="0.2" height="15.0" fill="rgb(229,82,18)" rx="2" ry="2" />
<text  x="1180.85" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;Procedure*, std::vector&lt;Procedure, std::allocator&lt;Procedure&gt; &gt; &gt; (2 samples, 0.01%)</title><rect x="767.5" y="293" width="0.2" height="15.0" fill="rgb(246,123,42)" rx="2" ry="2" />
<text  x="770.50" y="303.5" ></text>
</g>
<g >
<title>Xoroshiro128Plus::next (3 samples, 0.02%)</title><rect x="1038.8" y="277" width="0.2" height="15.0" fill="rgb(215,172,49)" rx="2" ry="2" />
<text  x="1041.78" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::operator++ (3 samples, 0.02%)</title><rect x="724.1" y="261" width="0.3" height="15.0" fill="rgb(223,84,46)" rx="2" ry="2" />
<text  x="727.11" y="271.5" ></text>
</g>
<g >
<title>Tuple::itrRemove (3 samples, 0.02%)</title><rect x="757.3" y="229" width="0.3" height="15.0" fill="rgb(213,110,54)" rx="2" ry="2" />
<text  x="760.29" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (7 samples, 0.05%)</title><rect x="758.0" y="245" width="0.6" height="15.0" fill="rgb(240,0,44)" rx="2" ry="2" />
<text  x="761.00" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Procedure&gt; &gt;::construct&lt;Procedure, Ope, unsigned long&amp;&gt; (14 samples, 0.10%)</title><rect x="1045.7" y="261" width="1.3" height="15.0" fill="rgb(241,13,20)" rx="2" ry="2" />
<text  x="1048.73" y="271.5" ></text>
</g>
<g >
<title>rdtscp (63 samples, 0.47%)</title><rect x="27.0" y="421" width="5.5" height="15.0" fill="rgb(239,106,14)" rx="2" ry="2" />
<text  x="29.99" y="431.5" ></text>
</g>
<g >
<title>wait_woken (5 samples, 0.04%)</title><rect x="1074.3" y="213" width="0.5" height="15.0" fill="rgb(213,24,24)" rx="2" ry="2" />
<text  x="1077.34" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::end (2 samples, 0.01%)</title><rect x="701.2" y="229" width="0.2" height="15.0" fill="rgb(221,37,15)" rx="2" ry="2" />
<text  x="704.22" y="239.5" ></text>
</g>
<g >
<title>usleep (3 samples, 0.02%)</title><rect x="668.2" y="245" width="0.3" height="15.0" fill="rgb(246,173,31)" rx="2" ry="2" />
<text  x="671.22" y="255.5" ></text>
</g>
<g >
<title>call_function_single_interrupt (7 samples, 0.05%)</title><rect x="1178.5" y="405" width="0.6" height="15.0" fill="rgb(232,80,22)" rx="2" ry="2" />
<text  x="1181.47" y="415.5" ></text>
</g>
<g >
<title>RWLock::w_trylock (23 samples, 0.17%)</title><rect x="717.2" y="245" width="2.1" height="15.0" fill="rgb(251,131,41)" rx="2" ry="2" />
<text  x="720.24" y="255.5" ></text>
</g>
<g >
<title>RWLock::w_unlock (3 samples, 0.02%)</title><rect x="655.6" y="245" width="0.3" height="15.0" fill="rgb(246,116,20)" rx="2" ry="2" />
<text  x="658.63" y="255.5" ></text>
</g>
<g >
<title>do_nanosleep (31 samples, 0.23%)</title><rect x="738.0" y="165" width="2.7" height="15.0" fill="rgb(245,5,50)" rx="2" ry="2" />
<text  x="741.02" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (4 samples, 0.03%)</title><rect x="721.9" y="245" width="0.4" height="15.0" fill="rgb(217,139,41)" rx="2" ry="2" />
<text  x="724.91" y="255.5" ></text>
</g>
<g >
<title>native_write_msr (6 samples, 0.04%)</title><rect x="763.8" y="37" width="0.5" height="15.0" fill="rgb(214,117,4)" rx="2" ry="2" />
<text  x="766.81" y="47.5" ></text>
</g>
<g >
<title>TxExecutor::LockRetire (71 samples, 0.53%)</title><rect x="716.9" y="277" width="6.2" height="15.0" fill="rgb(243,103,40)" rx="2" ry="2" />
<text  x="719.89" y="287.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.04%)</title><rect x="1177.2" y="421" width="0.5" height="15.0" fill="rgb(221,202,32)" rx="2" ry="2" />
<text  x="1180.24" y="431.5" ></text>
</g>
<g >
<title>remote_function (7 samples, 0.05%)</title><rect x="1178.5" y="341" width="0.6" height="15.0" fill="rgb(206,9,19)" rx="2" ry="2" />
<text  x="1181.47" y="351.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (4 samples, 0.03%)</title><rect x="1177.3" y="277" width="0.4" height="15.0" fill="rgb(215,15,23)" rx="2" ry="2" />
<text  x="1180.33" y="287.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (11 samples, 0.08%)</title><rect x="719.3" y="229" width="0.9" height="15.0" fill="rgb(252,206,0)" rx="2" ry="2" />
<text  x="722.27" y="239.5" ></text>
</g>
<g >
<title>TxExecutor::searchWriteSet (25 samples, 0.19%)</title><rect x="723.7" y="277" width="2.2" height="15.0" fill="rgb(231,19,45)" rx="2" ry="2" />
<text  x="726.67" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::end (3 samples, 0.02%)</title><rect x="668.6" y="261" width="0.2" height="15.0" fill="rgb(237,138,42)" rx="2" ry="2" />
<text  x="671.57" y="271.5" ></text>
</g>
<g >
<title>Xoroshiro128Plus::next (2 samples, 0.01%)</title><rect x="11.8" y="421" width="0.2" height="15.0" fill="rgb(232,137,52)" rx="2" ry="2" />
<text  x="14.85" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;Procedure*, std::vector&lt;Procedure, std::allocator&lt;Procedure&gt; &gt; &gt;::operator- (2 samples, 0.01%)</title><rect x="1047.1" y="245" width="0.1" height="15.0" fill="rgb(241,213,8)" rx="2" ry="2" />
<text  x="1050.06" y="255.5" ></text>
</g>
<g >
<title>ctx_resched (102 samples, 0.76%)</title><rect x="1179.6" y="309" width="9.0" height="15.0" fill="rgb(205,125,40)" rx="2" ry="2" />
<text  x="1182.61" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::operator* (2 samples, 0.01%)</title><rect x="12.8" y="421" width="0.2" height="15.0" fill="rgb(217,53,27)" rx="2" ry="2" />
<text  x="15.82" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (7 samples, 0.05%)</title><rect x="665.8" y="197" width="0.6" height="15.0" fill="rgb(234,207,25)" rx="2" ry="2" />
<text  x="668.75" y="207.5" ></text>
</g>
<g >
<title>__schedule (14 samples, 0.10%)</title><rect x="763.1" y="133" width="1.2" height="15.0" fill="rgb(210,122,34)" rx="2" ry="2" />
<text  x="766.10" y="143.5" ></text>
</g>
<g >
<title>finish_task_switch (4 samples, 0.03%)</title><rect x="11.0" y="341" width="0.3" height="15.0" fill="rgb(248,149,10)" rx="2" ry="2" />
<text  x="13.97" y="351.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (6 samples, 0.04%)</title><rect x="10.3" y="373" width="0.5" height="15.0" fill="rgb(215,82,46)" rx="2" ry="2" />
<text  x="13.26" y="383.5" ></text>
</g>
<g >
<title>native_write_msr (2 samples, 0.01%)</title><rect x="712.6" y="85" width="0.2" height="15.0" fill="rgb(227,209,16)" rx="2" ry="2" />
<text  x="715.58" y="95.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (3 samples, 0.02%)</title><rect x="1188.9" y="261" width="0.3" height="15.0" fill="rgb(247,188,26)" rx="2" ry="2" />
<text  x="1191.94" y="271.5" ></text>
</g>
<g >
<title>Backoff::backoff (6,205 samples, 46.29%)</title><rect x="108.7" y="277" width="546.1" height="15.0" fill="rgb(220,191,35)" rx="2" ry="2" />
<text  x="111.67" y="287.5" >Backoff::backoff</text>
</g>
<g >
<title>hrtimer_nanosleep (27 samples, 0.20%)</title><rect x="712.5" y="181" width="2.4" height="15.0" fill="rgb(236,75,39)" rx="2" ry="2" />
<text  x="715.49" y="191.5" ></text>
</g>
<g >
<title>flush_smp_call_function_queue (102 samples, 0.76%)</title><rect x="1179.6" y="373" width="9.0" height="15.0" fill="rgb(219,31,39)" rx="2" ry="2" />
<text  x="1182.61" y="383.5" ></text>
</g>
<g >
<title>do_nanosleep (26 samples, 0.19%)</title><rect x="712.6" y="165" width="2.3" height="15.0" fill="rgb(235,191,33)" rx="2" ry="2" />
<text  x="715.58" y="175.5" ></text>
</g>
<g >
<title>dequeue_entity (2 samples, 0.01%)</title><rect x="668.2" y="69" width="0.2" height="15.0" fill="rgb(214,170,51)" rx="2" ry="2" />
<text  x="671.22" y="79.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (15 samples, 0.11%)</title><rect x="1188.7" y="389" width="1.3" height="15.0" fill="rgb(211,22,23)" rx="2" ry="2" />
<text  x="1191.68" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (2 samples, 0.01%)</title><rect x="667.2" y="197" width="0.1" height="15.0" fill="rgb(226,181,46)" rx="2" ry="2" />
<text  x="670.16" y="207.5" ></text>
</g>
<g >
<title>do_exit (1,146 samples, 8.55%)</title><rect x="1075.0" y="373" width="100.8" height="15.0" fill="rgb(205,151,11)" rx="2" ry="2" />
<text  x="1077.96" y="383.5" >do_exit</text>
</g>
<g >
<title>x86_pmu_enable (102 samples, 0.76%)</title><rect x="1179.6" y="293" width="9.0" height="15.0" fill="rgb(234,188,36)" rx="2" ry="2" />
<text  x="1182.61" y="303.5" ></text>
</g>
<g >
<title>RWLock::w_trylock (76 samples, 0.57%)</title><rect x="675.3" y="245" width="6.6" height="15.0" fill="rgb(214,54,36)" rx="2" ry="2" />
<text  x="678.26" y="255.5" ></text>
</g>
<g >
<title>[unknown] (256 samples, 1.91%)</title><rect x="11.5" y="437" width="22.5" height="15.0" fill="rgb(209,19,41)" rx="2" ry="2" />
<text  x="14.50" y="447.5" >[..</text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 0.03%)</title><rect x="11.0" y="309" width="0.3" height="15.0" fill="rgb(232,214,12)" rx="2" ry="2" />
<text  x="13.97" y="319.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (18 samples, 0.13%)</title><rect x="739.0" y="101" width="1.6" height="15.0" fill="rgb(206,33,41)" rx="2" ry="2" />
<text  x="741.98" y="111.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (10 samples, 0.07%)</title><rect x="704.5" y="101" width="0.9" height="15.0" fill="rgb(206,141,49)" rx="2" ry="2" />
<text  x="707.48" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::construct&lt;int, int const&amp;&gt; (3 samples, 0.02%)</title><rect x="721.9" y="213" width="0.3" height="15.0" fill="rgb(234,142,34)" rx="2" ry="2" />
<text  x="724.91" y="223.5" ></text>
</g>
<g >
<title>generic_smp_call_function_single_interrupt (102 samples, 0.76%)</title><rect x="1179.6" y="389" width="9.0" height="15.0" fill="rgb(223,193,36)" rx="2" ry="2" />
<text  x="1182.61" y="399.5" ></text>
</g>
<g >
<title>native_write_msr (3 samples, 0.02%)</title><rect x="1177.4" y="261" width="0.3" height="15.0" fill="rgb(207,109,15)" rx="2" ry="2" />
<text  x="1180.41" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (2 samples, 0.01%)</title><rect x="758.9" y="229" width="0.2" height="15.0" fill="rgb(245,228,11)" rx="2" ry="2" />
<text  x="761.88" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::end (7 samples, 0.05%)</title><rect x="725.3" y="261" width="0.6" height="15.0" fill="rgb(209,107,24)" rx="2" ry="2" />
<text  x="728.25" y="271.5" ></text>
</g>
<g >
<title>Backoff::backoff (12 samples, 0.09%)</title><rect x="10.3" y="437" width="1.0" height="15.0" fill="rgb(223,110,26)" rx="2" ry="2" />
<text  x="13.26" y="447.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (5 samples, 0.04%)</title><rect x="1074.3" y="357" width="0.5" height="15.0" fill="rgb(235,27,9)" rx="2" ry="2" />
<text  x="1077.34" y="367.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (7 samples, 0.05%)</title><rect x="1092.1" y="245" width="0.6" height="15.0" fill="rgb(243,202,37)" rx="2" ry="2" />
<text  x="1095.12" y="255.5" ></text>
</g>
<g >
<title>RWLock::w_unlock (7 samples, 0.05%)</title><rect x="726.3" y="261" width="0.6" height="15.0" fill="rgb(210,227,27)" rx="2" ry="2" />
<text  x="729.31" y="271.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (3 samples, 0.02%)</title><rect x="655.6" y="229" width="0.3" height="15.0" fill="rgb(219,159,0)" rx="2" ry="2" />
<text  x="658.63" y="239.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (4 samples, 0.03%)</title><rect x="1074.4" y="85" width="0.4" height="15.0" fill="rgb(225,180,27)" rx="2" ry="2" />
<text  x="1077.43" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::emplace_back&lt;unsigned long&amp;, Tuple*&amp;, char  (125 samples, 0.93%)</title><rect x="727.0" y="261" width="11.0" height="15.0" fill="rgb(245,91,1)" rx="2" ry="2" />
<text  x="730.01" y="271.5" ></text>
</g>
<g >
<title>mmput (1,146 samples, 8.55%)</title><rect x="1075.0" y="357" width="100.8" height="15.0" fill="rgb(249,160,36)" rx="2" ry="2" />
<text  x="1077.96" y="367.5" >mmput</text>
</g>
<g >
<title>finish_task_switch (15 samples, 0.11%)</title><rect x="1188.7" y="341" width="1.3" height="15.0" fill="rgb(217,139,8)" rx="2" ry="2" />
<text  x="1191.68" y="351.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (4 samples, 0.03%)</title><rect x="1179.1" y="373" width="0.3" height="15.0" fill="rgb(224,164,21)" rx="2" ry="2" />
<text  x="1182.09" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::operator* (4 samples, 0.03%)</title><rect x="709.4" y="261" width="0.4" height="15.0" fill="rgb(206,169,13)" rx="2" ry="2" />
<text  x="712.41" y="271.5" ></text>
</g>
<g >
<title>hrtimer_nanosleep (31 samples, 0.23%)</title><rect x="738.0" y="181" width="2.7" height="15.0" fill="rgb(241,7,34)" rx="2" ry="2" />
<text  x="741.02" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 0.04%)</title><rect x="1074.3" y="309" width="0.5" height="15.0" fill="rgb(245,193,21)" rx="2" ry="2" />
<text  x="1077.34" y="319.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (4 samples, 0.03%)</title><rect x="11.0" y="277" width="0.3" height="15.0" fill="rgb(230,201,19)" rx="2" ry="2" />
<text  x="13.97" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_erase (8 samples, 0.06%)</title><rect x="720.7" y="229" width="0.7" height="15.0" fill="rgb(227,51,48)" rx="2" ry="2" />
<text  x="723.68" y="239.5" ></text>
</g>
<g >
<title>RWLock::w_unlock (35 samples, 0.26%)</title><rect x="752.2" y="261" width="3.1" height="15.0" fill="rgb(249,75,54)" rx="2" ry="2" />
<text  x="755.19" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::_M_erase_at_end (2 samples, 0.01%)</title><rect x="668.9" y="261" width="0.2" height="15.0" fill="rgb(214,20,10)" rx="2" ry="2" />
<text  x="671.92" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::__normal_iterator (4 samples, 0.03%)</title><rect x="725.5" y="245" width="0.4" height="15.0" fill="rgb(215,63,21)" rx="2" ry="2" />
<text  x="728.52" y="255.5" ></text>
</g>
<g >
<title>__schedule (4 samples, 0.03%)</title><rect x="1074.4" y="165" width="0.4" height="15.0" fill="rgb(222,61,16)" rx="2" ry="2" />
<text  x="1077.43" y="175.5" ></text>
</g>
<g >
<title>TxExecutor::commit (125 samples, 0.93%)</title><rect x="658.1" y="293" width="11.0" height="15.0" fill="rgb(254,185,32)" rx="2" ry="2" />
<text  x="661.09" y="303.5" ></text>
</g>
<g >
<title>TxExecutor::writelockAcquire (268 samples, 2.00%)</title><rect x="740.7" y="277" width="23.6" height="15.0" fill="rgb(235,150,47)" rx="2" ry="2" />
<text  x="743.74" y="287.5" >T..</text>
</g>
<g >
<title>TxExecutor::searchWriteSet (39 samples, 0.29%)</title><rect x="708.4" y="277" width="3.5" height="15.0" fill="rgb(253,83,48)" rx="2" ry="2" />
<text  x="711.44" y="287.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (4 samples, 0.03%)</title><rect x="11.0" y="389" width="0.3" height="15.0" fill="rgb(235,152,4)" rx="2" ry="2" />
<text  x="13.97" y="399.5" ></text>
</g>
<g >
<title>finish_task_switch (5 samples, 0.04%)</title><rect x="1177.2" y="341" width="0.5" height="15.0" fill="rgb(228,59,52)" rx="2" ry="2" />
<text  x="1180.24" y="351.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;int&gt;::operator++ (7 samples, 0.05%)</title><rect x="660.5" y="213" width="0.6" height="15.0" fill="rgb(239,160,46)" rx="2" ry="2" />
<text  x="663.47" y="223.5" ></text>
</g>
<g >
<title>_raw_spin_lock (2 samples, 0.01%)</title><rect x="1177.7" y="309" width="0.2" height="15.0" fill="rgb(228,81,4)" rx="2" ry="2" />
<text  x="1180.68" y="319.5" ></text>
</g>
<g >
<title>std::operator&amp; (3 samples, 0.02%)</title><rect x="719.0" y="229" width="0.3" height="15.0" fill="rgb(221,37,54)" rx="2" ry="2" />
<text  x="722.00" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int const&amp;&gt; (13 samples, 0.10%)</title><rect x="687.1" y="229" width="1.1" height="15.0" fill="rgb(240,133,51)" rx="2" ry="2" />
<text  x="690.05" y="239.5" ></text>
</g>
<g >
<title>std::operator&amp; (3 samples, 0.02%)</title><rect x="681.7" y="229" width="0.2" height="15.0" fill="rgb(247,175,2)" rx="2" ry="2" />
<text  x="684.68" y="239.5" ></text>
</g>
<g >
<title>log1 (24 samples, 0.18%)</title><rect x="1042.9" y="229" width="2.1" height="15.0" fill="rgb(229,19,22)" rx="2" ry="2" />
<text  x="1045.92" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (16 samples, 0.12%)</title><rect x="704.0" y="213" width="1.4" height="15.0" fill="rgb(209,179,15)" rx="2" ry="2" />
<text  x="706.95" y="223.5" ></text>
</g>
<g >
<title>_raw_spin_lock (2 samples, 0.01%)</title><rect x="1172.1" y="181" width="0.2" height="15.0" fill="rgb(226,172,16)" rx="2" ry="2" />
<text  x="1175.13" y="191.5" ></text>
</g>
<g >
<title>update_load_avg (2 samples, 0.01%)</title><rect x="668.2" y="53" width="0.2" height="15.0" fill="rgb(237,204,2)" rx="2" ry="2" />
<text  x="671.22" y="63.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::operator++ (4 samples, 0.03%)</title><rect x="706.2" y="261" width="0.3" height="15.0" fill="rgb(238,173,27)" rx="2" ry="2" />
<text  x="709.15" y="271.5" ></text>
</g>
<g >
<title>x86_pmu_enable (16 samples, 0.12%)</title><rect x="1175.8" y="293" width="1.4" height="15.0" fill="rgb(206,186,25)" rx="2" ry="2" />
<text  x="1178.83" y="303.5" ></text>
</g>
<g >
<title>sys_nanosleep (16 samples, 0.12%)</title><rect x="704.0" y="197" width="1.4" height="15.0" fill="rgb(239,200,11)" rx="2" ry="2" />
<text  x="706.95" y="207.5" ></text>
</g>
<g >
<title>update_process_times (4 samples, 0.03%)</title><rect x="1179.1" y="325" width="0.3" height="15.0" fill="rgb(236,206,15)" rx="2" ry="2" />
<text  x="1182.09" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::size (3 samples, 0.02%)</title><rect x="722.7" y="245" width="0.3" height="15.0" fill="rgb(250,183,48)" rx="2" ry="2" />
<text  x="725.70" y="255.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (16 samples, 0.12%)</title><rect x="713.4" y="69" width="1.4" height="15.0" fill="rgb(232,91,16)" rx="2" ry="2" />
<text  x="716.37" y="79.5" ></text>
</g>
<g >
<title>loadAcquire&lt;bool const&gt; (21 samples, 0.16%)</title><rect x="1175.8" y="437" width="1.9" height="15.0" fill="rgb(251,57,30)" rx="2" ry="2" />
<text  x="1178.83" y="447.5" ></text>
</g>
<g >
<title>__GI___nanosleep (16 samples, 0.12%)</title><rect x="704.0" y="245" width="1.4" height="15.0" fill="rgb(237,9,36)" rx="2" ry="2" />
<text  x="706.95" y="255.5" ></text>
</g>
<g >
<title>all (13,406 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(211,8,25)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>native_write_msr (16 samples, 0.12%)</title><rect x="1175.8" y="245" width="1.4" height="15.0" fill="rgb(208,92,33)" rx="2" ry="2" />
<text  x="1178.83" y="255.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (4 samples, 0.03%)</title><rect x="1177.3" y="325" width="0.4" height="15.0" fill="rgb(236,84,53)" rx="2" ry="2" />
<text  x="1180.33" y="335.5" ></text>
</g>
<g >
<title>TxExecutor::checkWound (29 samples, 0.22%)</title><rect x="756.5" y="261" width="2.6" height="15.0" fill="rgb(208,151,41)" rx="2" ry="2" />
<text  x="759.50" y="271.5" ></text>
</g>
<g >
<title>SetElement&lt;Tuple&gt;::SetElement (115 samples, 0.86%)</title><rect x="727.5" y="213" width="10.1" height="15.0" fill="rgb(227,80,44)" rx="2" ry="2" />
<text  x="730.45" y="223.5" ></text>
</g>
<g >
<title>unmap_single_vma (1,145 samples, 8.54%)</title><rect x="1075.0" y="309" width="100.8" height="15.0" fill="rgb(220,161,20)" rx="2" ry="2" />
<text  x="1078.05" y="319.5" >unmap_single..</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::erase (4 samples, 0.03%)</title><rect x="661.3" y="229" width="0.3" height="15.0" fill="rgb(212,210,1)" rx="2" ry="2" />
<text  x="664.26" y="239.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (48 samples, 0.36%)</title><rect x="1146.9" y="229" width="4.2" height="15.0" fill="rgb(228,211,22)" rx="2" ry="2" />
<text  x="1149.87" y="239.5" ></text>
</g>
<g >
<title>finish_task_switch (22 samples, 0.16%)</title><rect x="738.7" y="117" width="2.0" height="15.0" fill="rgb(244,59,9)" rx="2" ry="2" />
<text  x="741.72" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (4 samples, 0.03%)</title><rect x="666.5" y="197" width="0.3" height="15.0" fill="rgb(235,79,18)" rx="2" ry="2" />
<text  x="669.46" y="207.5" ></text>
</g>
<g >
<title>x86_pmu_enable (10 samples, 0.07%)</title><rect x="704.5" y="85" width="0.9" height="15.0" fill="rgb(234,108,35)" rx="2" ry="2" />
<text  x="707.48" y="95.5" ></text>
</g>
<g >
<title>Procedure::Procedure (7 samples, 0.05%)</title><rect x="1046.3" y="229" width="0.6" height="15.0" fill="rgb(246,76,30)" rx="2" ry="2" />
<text  x="1049.26" y="239.5" ></text>
</g>
<g >
<title>native_write_msr (13 samples, 0.10%)</title><rect x="713.6" y="37" width="1.2" height="15.0" fill="rgb(209,32,42)" rx="2" ry="2" />
<text  x="716.63" y="47.5" ></text>
</g>
<g >
<title>chkClkSpan (98 samples, 0.73%)</title><rect x="13.5" y="421" width="8.6" height="15.0" fill="rgb(245,42,18)" rx="2" ry="2" />
<text  x="16.52" y="431.5" ></text>
</g>
<g >
<title>usleep (31 samples, 0.23%)</title><rect x="738.0" y="261" width="2.7" height="15.0" fill="rgb(221,32,13)" rx="2" ry="2" />
<text  x="741.02" y="271.5" ></text>
</g>
<g >
<title>Tuple::ownersRemove (6 samples, 0.04%)</title><rect x="661.1" y="245" width="0.5" height="15.0" fill="rgb(234,78,20)" rx="2" ry="2" />
<text  x="664.09" y="255.5" ></text>
</g>
<g >
<title>nohz_balance_exit_idle.part.98 (3 samples, 0.02%)</title><rect x="10.5" y="277" width="0.3" height="15.0" fill="rgb(205,38,22)" rx="2" ry="2" />
<text  x="13.53" y="287.5" ></text>
</g>
<g >
<title>tty_read (5 samples, 0.04%)</title><rect x="1074.3" y="245" width="0.5" height="15.0" fill="rgb(210,139,2)" rx="2" ry="2" />
<text  x="1077.34" y="255.5" ></text>
</g>
<g >
<title>release_pages (943 samples, 7.03%)</title><rect x="1092.8" y="245" width="83.0" height="15.0" fill="rgb(207,214,6)" rx="2" ry="2" />
<text  x="1095.83" y="255.5" >release_p..</text>
</g>
<g >
<title>__dec_node_state (3 samples, 0.02%)</title><rect x="1088.4" y="261" width="0.3" height="15.0" fill="rgb(252,91,50)" rx="2" ry="2" />
<text  x="1091.42" y="271.5" ></text>
</g>
<g >
<title>smp_call_function_single_interrupt (16 samples, 0.12%)</title><rect x="1175.8" y="405" width="1.4" height="15.0" fill="rgb(236,113,48)" rx="2" ry="2" />
<text  x="1178.83" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::back (5 samples, 0.04%)</title><rect x="701.0" y="245" width="0.4" height="15.0" fill="rgb(249,14,4)" rx="2" ry="2" />
<text  x="703.96" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;SetElement&lt;Tuple&gt;*, std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt; &gt;::base (3 samples, 0.02%)</title><rect x="12.6" y="421" width="0.2" height="15.0" fill="rgb(210,161,42)" rx="2" ry="2" />
<text  x="15.55" y="431.5" ></text>
</g>
<g >
<title>finish_task_switch (22 samples, 0.16%)</title><rect x="712.8" y="117" width="2.0" height="15.0" fill="rgb(208,97,49)" rx="2" ry="2" />
<text  x="715.84" y="127.5" ></text>
</g>
<g >
<title>task_tick_fair (2 samples, 0.01%)</title><rect x="1179.3" y="293" width="0.1" height="15.0" fill="rgb(239,132,44)" rx="2" ry="2" />
<text  x="1182.26" y="303.5" ></text>
</g>
<g >
<title>__mod_node_page_state (2 samples, 0.01%)</title><rect x="1091.7" y="245" width="0.2" height="15.0" fill="rgb(205,36,22)" rx="2" ry="2" />
<text  x="1094.68" y="255.5" ></text>
</g>
<g >
<title>chkClkSpan (426 samples, 3.18%)</title><rect x="405.0" y="261" width="37.5" height="15.0" fill="rgb(233,191,35)" rx="2" ry="2" />
<text  x="408.04" y="271.5" >chk..</text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 0.03%)</title><rect x="11.0" y="293" width="0.3" height="15.0" fill="rgb(221,215,25)" rx="2" ry="2" />
<text  x="13.97" y="303.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (5 samples, 0.04%)</title><rect x="1177.2" y="405" width="0.5" height="15.0" fill="rgb(243,226,22)" rx="2" ry="2" />
<text  x="1180.24" y="415.5" ></text>
</g>
<g >
<title>intel_bts_enable_local (3 samples, 0.02%)</title><rect x="713.4" y="37" width="0.2" height="15.0" fill="rgb(214,92,33)" rx="2" ry="2" />
<text  x="716.37" y="47.5" ></text>
</g>
<g >
<title>intel_bts_enable_local (2 samples, 0.01%)</title><rect x="704.7" y="37" width="0.1" height="15.0" fill="rgb(249,229,6)" rx="2" ry="2" />
<text  x="707.66" y="47.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="657.4" y="213" width="0.2" height="15.0" fill="rgb(236,117,0)" rx="2" ry="2" />
<text  x="660.39" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;SetElement&lt;Tuple&gt; &gt;::construct&lt;SetElement&lt;Tuple&gt;, unsigned long&amp;, Tuple*&amp;, char  (109 samples, 0.81%)</title><rect x="691.4" y="229" width="9.6" height="15.0" fill="rgb(206,228,18)" rx="2" ry="2" />
<text  x="694.37" y="239.5" ></text>
</g>
<g >
<title>generic_smp_call_function_single_interrupt (16 samples, 0.12%)</title><rect x="1175.8" y="389" width="1.4" height="15.0" fill="rgb(235,203,44)" rx="2" ry="2" />
<text  x="1178.83" y="399.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (9 samples, 0.07%)</title><rect x="704.6" y="53" width="0.8" height="15.0" fill="rgb(241,148,46)" rx="2" ry="2" />
<text  x="707.57" y="63.5" ></text>
</g>
</g>
</svg>
